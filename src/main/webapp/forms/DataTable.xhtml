<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
  xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core" xmlns:b="http://bootsfaces.net/ui"
  xmlns:ui="http://java.sun.com/jsf/facelets">

  <ui:define name="content">
    <style>
td {
	padding: 8px;
}
</style>

    <h1>
      DataTable (&lt;b:dataTable /&gt;)
      <b:badge value="since 0.8.0" />
      <b:badge value="breaking changes in 0.9.0" style="margin-left:10px; background-color:#f2dede;color:red" />
    </h1>
    <p>
      The
      <code>&lt;b:dataTable &gt;</code>
      is a convenient component rendering the table mostly on the client. This, in turn, imposes certain limitations
      over server-side datatables. For instance, user interactions don't use AJAX to redraw the table, so you can't
      easily implement lazy loading. On the plus side is the speed of the data table. Only very large tables may suffer
      from long initial load times. Once the table is loaded, it's completely available on the client, which makes
      filtering and pagination very fast.
    </p>
    <p>The BootsFaces data table is based on the jQuery plugin <a target="#" href="https://datatables.net/">DataTables.net</a>,
    which has been published under a MIT licence.
    Most settings BootsFaces offers translate more or less directly into JavaScript options. So chances are you find
    a more detailed description of the attributes of the data table at their web site. The data table object is
    stored in a JavaScript variable (the <code>widgetVar</code>). If you don't specify a <code>widgetVar</code>,
    BootsFaces generates a variable based on the id of the <code>&lt;b:dataTable &gt;</code>. Following the tradition
    of Angular and other popular JS frameworks, the kebab-case of the id translates to a camelCase widgetVar.</p>

    <h3>Basic usage</h3>
    <p>Getting started with the BootsFaces datatable is pretty easy. Basically, it support the same syntax as its
    standard JSF counterpart <code>&lt;h:dataTable /&gt;</code>, but is also supports a more compact syntax. The
    simplest way to define a column is to simply use the <code>value</code> attribute. If you don't set a
    header, it's automatically derived from the variable name of the value.</p>
    <h:form>
    <b:tabView activeIndex="1">
      <b:tab title="JSF markup">
        <b:well>
          <script type="syntaxhighlighter"
            class="brush: xml; toolbar: false;gutter: false; first-line: 1">
            <![CDATA[
        <b:dataTable value="&num;{carPool.carPool}" var="car">
            <b:dataTableColumn value="&num;{car.brand}" />
            <b:dataTableColumn value="&num;{car.type}" />
            <b:dataTableColumn value="&num;{car.color}" />
            <b:dataTableColumn value="&num;{car.year}"  order="asc"/>
            <b:dataTableColumn value="&num:{car.price}" />
            <b:dataTableColumn value="&num;{car.enginePower}" label="Engine Power (hp)" />
        </b:dataTable>
      ]]>
      </script>
        </b:well>
      </b:tab>
      <b:tab title="displayed as" contentStyle="border:1px solid ;padding:10px">
        <b:dataTable value="#{carPool.carPool}"
                     var="car"
                     onpage="console.log('page');">
            <b:dataTableColumn value="#{car.brand}" />
            <b:dataTableColumn value="#{car.type}" />
            <b:dataTableColumn value="#{car.color}" />
            <b:dataTableColumn value="#{car.year}"  order="asc" />
            <b:dataTableColumn value="#{car.price}" />
            <b:dataTableColumn value="#{car.enginePower}" label="Engine Power (hp)" />
        </b:dataTable>
      </b:tab>
    </b:tabView>
    </h:form>

    <h3>Autocompletion: <code>h:column</code> vs. <code>b:dataTableColumn</code></h3>
    <p>BootsFaces supports a couple of attributes lacking in standard JSF. If you want to benefit from autocompletion,
    or if you're using a strict IDE like NetBeans, you'll want to use <code>&lt;b:dataTableColumn /&gt;</code>.
    We couldn't use <code>&lt;b:column /&gt;</code> because this widget is already used for the grid system. However,
    if you don't mind your IDE complaining, you can use <code>&lt;h:column /&gt;</code> and even
    <code>&lt;b:column /&gt;</code> with the extra attributes of BootsFaces.</p>

    <h3>Defining the header</h3>
    <p>You can use either the attribute <code>label</code> of the column, or you can define a facet named <code>"header"</code>
    inside the column. The latter option gives you more flexibility, because you can put arbitrary JSF code in a header.</p>

    <h3>Defining the content cells</h3>
    <p>You can either use the <code>value</code> attribute as seen above, or you can put arbitray JSF into the column.
    For instance, the example below shows how to put an input field into the column.</p>

    <h3>Customizing the table</h3>
    <p>The datatable has a couple of options to configure it. Some of them are shown in the example below.</p>

    <h:form id="table-form">
      <b:tabView activeIndex="1">
        <b:tab title="JSF markup">
          <b:well>
            <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
				    <![CDATA[
              <b:dataTable value="&num;{carPool.carPool}"
                var="car"
                id="basic-usage-id"
                border="&num;{dataTableSettingsBean.border}"
                custom-options="&num;{dataTableSettingsBean.customOptionsValue}"
                fixedHeader="&num;{dataTableSettingsBean.fixedHeader}"
                lang="&num;{dataTableSettingsBean.language}"
                multi-column-search="&num;{dataTableSettingsBean.multiColumnSearch}"
                page-length="5"
                page-length-menu="5,10,20"
                row-highlight="&num;{dataTableSettingsBean.rowHighlight}"
                save-state="&num;{dataTableSettingsBean.saveState}"
                searching="&num;{dataTableSettingsBean.searching}"
                select="&num;{dataTableSettingsBean.select}"
                selectionMode="&num;{dataTableSettingsBean.selectionMode}"
                striped="&num;{dataTableSettingsBean.striped}"
                >
                <b:dataTableColumn value="&num;{car.brand}" />
                <b:dataTableColumn order-by="dom-text" data-type="text" searchable="&num;{dataTableSettingsBean.searchable}">
                  <f:facet name="header">
                    <h:outputText value="Type"/>
                  </f:facet>
                  <h:inputText value="&num;{car.type}" />
                </b:dataTableColumn>
                <b:dataTableColumn label="Color"
                                   orderable="&num;{dataTableSettingsBean.orderable}"
                                   content-style="&num;{dataTableSettingsBean.contentCSS}"
                                   content-style-class="&num;{dataTableSettingsBean.contentStyleClassName}"
                                   footer-style="&num;{dataTableSettingsBean.footerCSS}"
                                   footer-style-class="&num;{dataTableSettingsBean.footerStyleClassName}"
                                   header-style="&num;{dataTableSettingsBean.headerCSS}"
                                   header-style-class="&num;{dataTableSettingsBean.headerStyleClassName}"
                                   custom-options="someColumnOption:true"
                                   searchable="&num;{dataTableSettingsBean.searchable}"
                                   >
                  <h:outputText value="&num;{car.color}" />
                </b:dataTableColumn>
              </b:dataTable>
      	    ]]></script>
          </b:well>
        </b:tab>
        <b:tab title="displayed as" contentStyle="border:1px solid;padding:10px">
          <b:row>
            <b:column small-screen="two-thirds">
              <b:dataTable value="#{carPool.carPool}"
                var="car"
                id="basic-usage-id"
                border="#{dataTableSettingsBean.border}"
                custom-options="#{dataTableSettingsBean.customOptionsValue}"
                fixedHeader="#{dataTableSettingsBean.fixedHeader}"
                lang="#{dataTableSettingsBean.language}"
                multi-column-search="#{dataTableSettingsBean.multiColumnSearch}"
                page-length="5"
                page-length-menu="5,10,20"
                row-highlight="#{dataTableSettingsBean.rowHighlight}"
                save-state="#{dataTableSettingsBean.saveState}"
                searching="#{dataTableSettingsBean.searching}"
                select="#{dataTableSettingsBean.select}"
                selectionMode="#{dataTableSettingsBean.selectionMode}"
                striped="#{dataTableSettingsBean.striped}"
                >
                <b:dataTableColumn value="#{car.brand}" />
                <b:dataTableColumn order-by="dom-text" data-type="text" searchable="#{dataTableSettingsBean.searchable}">
                  <f:facet name="header">
                    <h:outputText value="Type"/>
                  </f:facet>
                  <h:inputText value="#{car.type}" />
                </b:dataTableColumn>
                <b:dataTableColumn label="Color"
                                   orderable="#{dataTableSettingsBean.orderable}"
                                   content-style="#{dataTableSettingsBean.contentCSS}"
                                   content-style-class="#{dataTableSettingsBean.contentStyleClassName}"
                                   footer-style="#{dataTableSettingsBean.footerCSS}"
                                   footer-style-class="#{dataTableSettingsBean.footerStyleClassName}"
                                   header-style="#{dataTableSettingsBean.headerCSS}"
                                   header-style-class="#{dataTableSettingsBean.headerStyleClassName}"
                                   custom-options="someColumnOption:true"
                                   searchable="#{dataTableSettingsBean.searchable}"
                                   >
                  <h:outputText value="#{car.color}" />
                </b:dataTableColumn>
              </b:dataTable>
            </b:column>
            <b:panelGrid columns="1" small-screen="one-third">
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.saveState}" caption="save-state='true'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
              <b:selectBooleanCheckbox value="#{dataTableSettingsBean.headerStyle}" caption="header-style='color:red'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
              <b:selectBooleanCheckbox value="#{dataTableSettingsBean.headerStyleClass}" caption="header-style-class='hidden'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.contentStyle}" caption="content-style='color:red'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.contentStyleClass}" caption="content-style-class='hidden'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.footerStyle}" caption="footer-style='color:red'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.footerStyleClass}" caption="footer-style-class='hidden'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />

             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.searching}" caption="searching='true'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.multiColumnSearch}" caption="multi-column-search='true' (requires searching='true')"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.searchable}" caption="searchable='true' (2nd and 3rd column only)"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.striped}" caption="striped='true'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.border}" caption="border='true'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.rowHighlight}" caption="row-highlight='true'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />

             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.languageIsEs}" caption="language='es'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />

             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.orderable}" caption="orderable='true' (last column only)"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />

             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.select}" caption="select='true'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.singleSelectionMode}" caption="select='single'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.customOptions}" caption="customOption='colReorder:true'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />
             <b:selectBooleanCheckbox value="#{dataTableSettingsBean.fixedHeader}" caption="fixedHeader='true'"
                onclick="tableFormBasicUsageIdWidget.DataTable().destroy();ajax:dataTableSettingsBean.updateSettings()"
                update="basic-usage-id" />

            </b:panelGrid>
          </b:row>
        </b:tab>
      </b:tabView>
      </h:form>

    <h3>Sorting input fields</h3>
    <p>By default, the data table only sorts plain text. If you want to sort input field, checkboxes or comboboxes,
    you have to tell the column which the data type of the input field is:</p>
        <b:well>
            <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
            <![CDATA[
                  <b:dataTableColumn order-by="dom-text" data-type="text">
                      <h:inputText value="&num;{car.type}" />
                  </b:dataTableColumn>
             ]]></script>
          </b:well>
    <p>You can see the effect in the example above.</p>

    <h3>Internationalization</h3>
    <p>
      This example shows how to use the i18n support of
      <code>&lt;b:dataTable &gt;</code>. For i18n there were two ways: use internal translation (you can
      choose between a limited set of embedded translations) or you can
      provide your own translation with a remote URL (eg. CDN url)
    </p>

    <h3>Custom options</h3>
    <p>The JavaScript dataTable widgets has quite a few options. It's almost impossible to cover them all by a JSF
    component (see <a target="#" href="https://datatables.net/reference/option/">https://datatables.net/reference/option/</a>).
    Therefore, you can pass <code>custom-options</code> to both the dataTable and to each column. These options are
    added to the Json object used to initialize the datatable.</p>
    <p>Note that this feature may lead to incompatibilities in future versions of BoofsFaces. In particular, if
    your custom option is added to the <code>&lt;b:dataTable /&gt;</code> component, it may be added twice.</p>

    <h:form>
    <b:tabView activeIndex="1">
      <b:tab title="JSF markup">
        <b:well>
          <script type="syntaxhighlighter"
            class="brush: xml; toolbar: false;gutter: false; first-line: 1">
            <![CDATA[
        <b:dataTable value="&num;{carPool.carPool}"
                     var="car"
                     id="bcarPool2"
                     fixedHeader="true"
                     scroll-size="400px"
                     scroll-x="false"
                     responsive="true"
                     lang="it"
                     searching="false">
            <h:column value="&num;{car.brand}" />
            <h:column value="&num;{car.type}" />
            <h:column value="&num;{car.color}" />
            <h:column value="&num;{car.year}" />
            <h:column value="&num;{car.brand}" />
            <h:column value="&num;{car.type}" />
            <h:column value="&num;{car.color}" />
            <h:column value="&num;{car.year}" />
			]]>
			</script>
        </b:well>
      </b:tab>
      <b:tab title="displayed as" contentStyle="border:1px solid ;padding:10px">
        <b:dataTable value="#{carPool.carPool}"
                     var="car"
                     id="bcarPool2"
                     fixedHeader="true"
                     scroll-size="400px"
                     scroll-x="false"
                     responsive="true"
                     lang="it"
                     searching="false">
            <h:column value="#{car.brand}" />
            <h:column value="#{car.type}" />
            <h:column value="#{car.color}" />
            <h:column value="#{car.year}" />
            <h:column value="#{car.brand}" />
            <h:column value="#{car.type}" />
            <h:column value="#{car.color}" />
            <h:column value="#{car.year}" />
        </b:dataTable>
      </b:tab>
    </b:tabView>
        </h:form>

    <h3>Unified AJAX and JavaScript API</h3>
    <p>The datatable offers a couple of JavaScript and jQuery events you can use to call your own JavaScript or
    even your own bean method on the backend. Currently, the BootsFaces datatable offers only a subset of the
    events of the underlying JavaScript widget (see <a target="#" href="https://datatables.net/reference/event/">https://datatables.net/reference/event</a>).</p>
    <b:tabView activeIndex="1">
      <b:tab title="JSF markup">
        <b:well>
          <script type="syntaxhighlighter"
            class="brush: xml; toolbar: false;gutter: false; first-line: 1">
            <![CDATA[
        <b:dataTable value="&num;{carPool.carPool}" var="car"
                     onorder="console.log('order');"
                     onpage="console.log('page');"
                     onsearch="console.log('search');"
                     onselect="console.log('select');"
                     ondeselect="console.log('deselect');"
                     >
            <b:dataTableColumn value="&num;{car.brand}" />
            <b:dataTableColumn value="&num;{car.type}" />
            <b:dataTableColumn value="&num;{car.color}" />
            <b:dataTableColumn value="&num;{car.year}" />
            <b:dataTableColumn value="&num;{car.price}" />
            <b:dataTableColumn value="&num;{car.enginePower}" label="Engine Power (hp)" />
        </b:dataTable>
      ]]>
      </script>
        </b:well>
      </b:tab>
      <b:tab title="displayed as" contentStyle="border:1px solid ;padding:10px">
        <b:dataTable value="#{carPool.carPool}"
                     var="car"
                     onorder="console.log('order');"
                     onpage="console.log('page');"
                     onsearch="console.log('search');"
                     onselect="console.log('select');"
                     ondeselect="console.log('deselect');"
                     >
            <b:dataTableColumn value="#{car.brand}" />
            <b:dataTableColumn value="#{car.type}" />
            <b:dataTableColumn value="#{car.color}" />
            <b:dataTableColumn value="#{car.year}" />
            <b:dataTableColumn value="#{car.price}" />
            <b:dataTableColumn value="#{car.enginePower}" label="Engine Power (hp)" />
        </b:dataTable>
      </b:tab>
    </b:tabView>



    <h3>Responsiveness</h3>
    <p>
      Like most BootsFaces components, the datatable supports the responsive attributes like <code>col-*</code>,
      <code>visible</code> and <code>hidden</code>. If you want to update the datatable by an AJAX request,
      you should wrap it in a <code>b:column</code> nonetheless. For technical reasons, the id does not belong
      to the <code>div</code> bearing the CSS style classes for responsiveness. Instead, it belong to the <code>table</code>.
      So updating the table by its id means it's wrapped into another <code>div</code> each time it's updated by an
      AJAX request.
    </p>
    <p>If there's not enough screen estate to display the table, the last couple of columns are hidden, as you can see
    in this example:</p>

        <h:form>
    <b:tabView activeIndex="1">
      <b:tab title="JSF markup">
        <b:well>
          <script type="syntaxhighlighter"
            class="brush: xml; toolbar: false;gutter: false; first-line: 1">
            <![CDATA[
        <b:dataTable value="&num;{carPool.carPool}"
                      var="car"
                     id="bcarPool2"
                     fixedHeader="true"
                     scroll-size="400px"
                     scroll-x="false"
                     responsive="true"
                     lang="it"
                     searching="false"
                     >
            <h:column value="&num;{car.brand}" />
            <h:column value="&num;{car.type}" />
            <h:column value="&num;{car.color}" />
            <h:column value="&num;{car.year}" />
            <h:column value="&num;{car.price}" />
        </b:dataTable>
      ]]>
      </script>
        </b:well>
      </b:tab>
      <b:tab title="displayed as" contentStyle="border:1px solid ;padding:10px;width:300px !important">
        <b:dataTable value="#{carPool.carPool}"
                     var="car"
                     id="bcarPool2"
                     fixedHeader="true"
                     scroll-size="400px"
                     scroll-x="false"
                     responsive="true"
                     lang="it"
                     searching="false"
                     >
            <h:column value="#{car.brand}" />
            <h:column value="#{car.type}" />
            <h:column value="#{car.color}" />
            <h:column value="#{car.year}" />
            <h:column value="#{car.price}" />
        </b:dataTable>
      </b:tab>
    </b:tabView>
        </h:form>


    <h3>Empty data table:</h3>
        <h:form>
        <b:tabView activeIndex="1">
          <b:tab title="JSF markup">
            <b:well>
              <script type="syntaxhighlighter"
                class="brush: xml; toolbar: false;gutter: false; first-line: 1">
                <![CDATA[
            <b:dataTable value="&num;{carPool.emptyCarPool}"
              var="car">
               <h:column value="&num;{car.brand}" />
               <h:column value="&num;{car.type}" />
               <h:column value="&num;{car.color}" />
               <h:column value="&num;{car.year}" />
            </b:dataTable>
                ]]>
            </script>
            </b:well>
          </b:tab>
          <b:tab title="displayed as" contentStyle="border:1px solid ;padding:10px">
            <b:dataTable value="#{carPool.emptyCarPool}"
              var="car">
               <h:column value="#{car.brand}" />
               <h:column value="#{car.type}" />
               <h:column value="#{car.color}" />
               <h:column value="#{car.year}" />
            </b:dataTable>
          </b:tab>
        </b:tabView>
        </h:form>

  <h3>Inputfields, command buttons and AJAX <b:badge value="since 1.0" style="margin-left:10px;" /></h3>
    <p>The BootsFaces datatable also supports input fields, buttons and AJAX calls.</p>
    
    <h:form>
    <b:tabView activeIndex="1">
      <b:tab title="JSF markup">
        <b:well>
          <script type="syntaxhighlighter"
            class="brush: xml; toolbar: false;gutter: false; first-line: 1">
            <![CDATA[
        <b:dataTable value="&num;{carPool.carPool}"
                     var="car"
                     class="editableCarTable"
                     >
            <b:dataTableColumn value="&num;{car.brand}" />
            <b:dataTableColumn value="&num;{car.type}" />
            <b:dataTableColumn value="&num;{car.color}" />
            <b:dataTableColumn value="&num;{car.year}"  order="asc" />
            <b:dataTableColumn label="Price">
            	<b:inputText value="&num;{car.price}" rendered="&num;{car.editable}" />
            	<h:outputText value="&num;{car.price}" rendered="&num;{!car.editable}" />
            </b:dataTableColumn>
            <b:dataTableColumn>
                <b:commandButton value="edit" icon="edit" ajax="true" update="@(.editableCarTable)"
                    onclick="ajax:car.edit()" >
                </b:commandButton>
           </b:dataTableColumn>
        </b:dataTable>

      ]]>
      </script>
        </b:well>
      </b:tab>
      <b:tab title="displayed as" contentStyle="border:1px solid ;padding:10px" styleClass="tabClass">
        <b:dataTable value="#{carPool.carPool}"
                     var="car"
                     class="editableCarTable"
                     >
            <b:dataTableColumn value="#{car.brand}" />
            <b:dataTableColumn value="#{car.type}" />
            <b:dataTableColumn value="#{car.color}" />
            <b:dataTableColumn value="#{car.year}"  order="asc" />
            <b:dataTableColumn label="Price">
            	<b:inputText value="#{car.price}" rendered="#{car.editable}" />
            	<h:outputText value="#{car.price}" rendered="#{!car.editable}" />
            </b:dataTableColumn>
            <b:dataTableColumn>
                <b:commandButton value="edit" icon="edit" ajax="true" update="@(.editableCarTable)"
                    onclick="ajax:car.edit()" >
                </b:commandButton>
           </b:dataTableColumn>
        </b:dataTable>
      </b:tab>
    </b:tabView>
    </h:form>
 
    <h3>Reference section</h3>
    <ui:include src="DataTableAttributes.xhtml" />
        <ui:include src="DataTableColumnAttributes.xhtml" />
    <b:panel look="info" rendered="false">
      <f:facet name="heading">
        <b>Skinning</b>
      </f:facet>
      <ul>
        <li>Tell the world which CSS classes can be used to change the
          look of the component.</li>
      </ul>
    </b:panel>

    <script type="text/javascript">
      SyntaxHighlighter.all();
    </script>
    <br />
    <br />
    <br />
    <br />



  </ui:define>
</ui:composition>
