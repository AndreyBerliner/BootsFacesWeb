<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:b="http://bootsfaces.net/ui"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:p="http://primefaces.org/ui">

        <ui:define name="content">
            <h1>AJAX <b:badge value="since 0.8.0" /></h1>
                <p>While supporting the traditional AJAX style of JSF, BootsFaces also implements a new AJAX API that's a little simpler to use.</p>

                <h2>State of the art</h2>
                <p>The BootsFaces AJAX API is supported by many, but not by all BootsFaces components. Currently, these components include:</p>
                <ul>
                <li><code>&lt;b:commandButton /&gt;</code></li>
                <li><code>&lt;b:selectBooleanCheckbox /&gt;</code></li>
                <li><code>&lt;b:selectOneMenu /&gt;</code></li>
                <li><code>&lt;b:inputText /&gt;</code> and <code>&lt;b:inputSecret /&gt;</code></li>
                <li><code>&lt;b:carousel /&gt;</code></li>
                <li><code>&lt;b:panel /&gt;</code></li>
                <li><code>&lt;b:tabView /&gt;</code></li>
                <li><code>&lt;b:icon /&gt;</code></li>
                <li><code>&lt;b:iconAwesome /&gt;</code></li>
                <li><code>&lt;b:image /&gt;</code></li>
                </ul>

                <h2>Basic usage</h2>
                <p>The general idea is to use the JavaScript attributes for JSF AJAX calls. Unfortunately, JSF doesn't allow us to simply use the JSF EL syntax.
                So, we had to look for some inspiration, and we found it with an almost forgotten way to define HTML JavaScript callback handlers. You can
                optionally define such a handler by preceding it with <code>javascript:</code> to make clear which language you want to use. Similarly, BootsFaces
                uses the prefix <code>ajax:</code> to indicate the following code is Java code. If you want to execute another piece of JavaScript code after
                sending the AJAX call, prefix it with <code>javascript:</code> again. Notice that the second JavaScript code usually is executed before the Java code.
                AJAX means that the reference Java code is executed asynchronically.</p>

                <b:well>
                   <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
                   <![CDATA[
                                   <b:selectOneMenu update="someRegion"
                                      onchange="ajax:ajaxBean.onComboboxChange()" />
                   ]]>
                   </script>
                                   </b:well>
				<p>Like said before, you can freely combine AJAX calls and JavaScript. If you want to execute JavaScript code after the AJAX call,
				you have to precede it with <code>javascript:</code>. Otherwise BootsFaces tries to run your JavaScript code on the server side. </p>
                <b:well>
                  <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
                	<![CDATA[
                                <b:selectOneMenu update="someRegion"
                                   onchange="alert('Before the AJAX call');ajax:ajaxBean.onComboboxChange();javascript:alert('after the AJAX call');" />
               	 ]]>
                	</script>
                </b:well>
				<p>You can also use more than one JavaScript attribute to call AJAX code: <code>onclick</code>, <code>ondlbclick</code>, <code>onfocus</code>,
				just to name a few. Each of these AJAX calls update the same part of the DOM tree, defined by the <code>update</code> attribute.</p>

                <h2>Partial processing</h2>
                <p>Use the <code>process</code> attribute to define which input fields are send to the server.</p>


				<h2>Advanced usage</h2>
                <p>Sometimes you need more flexibility. For instance, it's a common use case to update different regions, depending on the event.
                 In this case you can resort to the traditional <code>&lt;f:ajax&gt;</code> facets of standard JSF. Note the diffenrent naming
                 conventions: BootsFaces <code>update</code> becomes <code>render</code>, and <code>process</code> becomes <code>execute</code>.
                 This is because <code>f:ajax</code> is provided by the underlying JSF framework, which doesn't follow the conventions of
                 BootsFaces, which in turn has been inspired by (and is seeking compatibility to) PrimeFaces.</p>

                <h2>Exceptions during AJAX calls</h2>
                <p>For technical reasons, JSF reacts a bit ungraceful if the server raises an exception during and AJAX request.
                If you're using MyFaces and if you've configured your application to be in the development stage,
                you'll see a non-descript JavaScript error message. In every other case you don't see anything at all.</p>
                <p>To solve the problem, register an <code>AjaxExceptionHandler</code>, as described at
                <a target="#" href="http://www.beyondjava.net/blog/jsf-2-0-hides-exceptions-ajax/">http://www.beyondjava.net/blog/jsf-2-0-hides-exceptions-ajax/</a>.
                A good starting point is the OmniFaces <code>FullAjaxExceptionHandler</code>. If you use CDI and DeltaSpike,
                <code>@ExceptionHandler</code> is an interesting alternative.</p>


                 <h2>(Virtually no) Limits to BootsFaces AJAX</h2>
                 <p>From a technical point of view, you can do everything with BootsFaces AJAX - as long as the network latency permits. We've even been
                 able to implement drag and drop via AJAX. This chess demo is an example of drag and drop using BootsFaces:
                 <a target="#" href="http://www.angularfaces.net/BootsFacesChess-1.0.0-SNAPSHOT/">BootsFaces Chess demo</a>. You can move the chess pieces
                 by clicking and draggging them to their target destination.</p>
                 <p>In other words: what you can and can not do with BootsFaces AJAX depends on your network latency (and your server-side processing time). BootsFaces
                 processes AJAX fairly efficient, so it's unlikely BootsFaces is the bottleneck to your projects.</p>

                <h2>Known bugs and limitations</h2>
                <ul>
                <li><code>update="@all"</code> doesn't work in BootsFaces 0.8.0.</li>
                <li>The algorithm parsing jQuery expression in update statements (e.g. <code>update="@(body>*)"</code>) is very primitive. It fails if
                there's a space in the jQuery expression.</li>
                </ul>
				<h2>Live demo</h2>
				<p>This demo shows some of the options at a glance.</p>
				<b:tabView>
				<b:tab title="live demo">
				<b:well>
				<ui:include src="ajaxCombobox.xhtml"></ui:include>
				</b:well>
				</b:tab>
				<b:tab title="source code">
				<b:well>
				<ui:include src="ajaxComboboxSource.xhtml"></ui:include>
				</b:well>
				</b:tab>
				</b:tabView>


            <br />

            <script type="text/javascript">
                SyntaxHighlighter.all();
            </script>
            <br />
            <br />
            <br />
            <br />
        </ui:define>
    </ui:composition>
