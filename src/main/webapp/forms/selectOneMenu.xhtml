<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:b="http://bootsfaces.net/ui"
      xmlns:ui="http://java.sun.com/jsf/facelets">

            <ui:define name="content">
                <style>td {padding: 8px;}</style>
                <h1>Combobox (&lt;b:selectOneMenu&gt;)</h1>
                
                <p>Comboboxes give you a list of items to select from. As of Bootsfaces 0.6, comboboxes are not editable - they are pure drop-down menus.</p>
                <p>&lt;b:selectOneMenu&gt; makes the Bootstrap style of displaying comboboxes available to JSF programmers.</p>
                <h1>Basic usage</h1>
        <h:form>
            <b:tabView activeIndex="1">
                <b:tab title="JSF markup">
                    <b:well>
                        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
        <h:form>
	        <b:panelGrid colSpans="2,2,2,2,4">
	        	<h:outputLabel value="Select your car's brand:" for="brandID" />
			    <b:selectOneMenu value="&num;{selectOneMenuBean.brand}" id="brandID" >
				    <f:selectItem itemLabel="Fiat" itemValue="1"/>
				    <f:selectItem itemLabel="Honda" itemValue="2"/>
				    <f:selectItem itemLabel="Opel" itemValue="3"/>
			    </b:selectOneMenu>
			    <h:message for="brandID"/>
			    <h:outputLabel value="last submitted value:" for="brandOutputID"/>
			    <b:inputText value="&num;{selectOneMenuBean.brand}" disabled="true" id="brandOutputID"/>
	        	<h:outputLabel value="Select your car's type:" for="typeID" />
			    <b:selectOneMenu value="&num;{selectOneMenuBean.type}" id="typeID" required="true">
			    		<f:selectItem itemLabel="(Please select)" itemValue=""/>
			    		<f:selectItem itemLabel="Cinquecento" itemValue="1"/>
					    <f:selectItem itemLabel="Civic" itemValue="2"/>
					    <f:selectItem itemLabel="Astra" itemValue="3"/>
			    </b:selectOneMenu>
			    <h:message for="typeID"/>
			    <h:outputLabel value="last submitted value:" for="typeOutputID" />
			    <b:inputText value="&num;{selectOneMenuBean.type}" disabled="true" id="typeOutputID"/>
		    </b:panelGrid>
            <b:commandButton value="Submit AJAX">
                <f:ajax execute="@form" render="brandOutputID typeOutputID" />
            </b:commandButton>
       </h:form>
]]>
       </script>
                    </b:well>
                </b:tab>
                <b:tab title="displayed as">
                    <b:well>
                        <b:panelGrid colSpans="2,2,2,2,4">
                            <h:outputLabel value="Select your car's brand:" for="brandID" id="l1" />
                            <b:selectOneMenu value="#{selectOneMenuBean.brand}" id="brandID" onchange="console.log('change');" onselect="console.log('select');">
                                <f:selectItem itemLabel="(Please select)" itemValue="" />
                                <f:selectItem itemLabel="Fiat" itemValue="1" />
                                <f:selectItem itemLabel="Honda" itemValue="2" />
                                <f:selectItem itemLabel="Opel" itemValue="3" />
                            </b:selectOneMenu>
                            <h:message for="brandID" />
                            <h:outputLabel value="last submitted value:" for="brandOutputID" />
                            <b:inputText value="#{selectOneMenuBean.brand}" disabled="true" id="brandOutputID" />
                            <h:outputLabel value="Select your car's type:" for="typeID" />
                            <b:selectOneMenu value="#{selectOneMenuBean.type}" id="typeID" required="true">
                                <f:selectItem itemLabel="(Please select)" itemValue="" />
                                <f:selectItem itemLabel="Cinquecento" itemValue="1" />
                                <f:selectItem itemLabel="Civic" itemValue="2" />
                                <f:selectItem itemLabel="Astra" itemValue="3" />
                                <f:selectItem itemLabel="Megane" itemValue="4" />
                            </b:selectOneMenu>
                            <h:message for="typeID" />
                            <h:outputLabel value="last submitted value:" for="typeOutputID" />
                            <b:inputText value="#{selectOneMenuBean.type}" disabled="true" id="typeOutputID" />
                        </b:panelGrid>
                        <b:commandButton value="Submit AJAX">
                            <f:ajax execute="@form" render="brandOutputID typeOutputID" />
                        </b:commandButton>
                   </b:well>
                </b:tab>
            </b:tabView>
        </h:form>






    <h3>Disabled items</h3>

    <p>Items can also be disabled. If so, they are grayed out, and they can't be selected.</p>
    <h:form>
      <b:tabView activeIndex="1">
        <b:tab title="JSF markup">
          <b:well>
            <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
              <h:outputLabel value="Select your car's brand:" for="brandID2" id="l1" />
              <b:selectOneMenu value="#num;{selectOneMenuBean.brand}" id="brandID2" onchange="console.log('change');"
                onselect="console.log('select');">
                <f:selectItem itemLabel="(Please select)" itemValue="" />
                <f:selectItem itemLabel="Fiat" itemValue="1" itemDisabled="true" />
                <f:selectItem itemLabel="Honda" itemValue="2" />
                <f:selectItem itemLabel="Opel" itemValue="3" itemDisabled="true" />
              </b:selectOneMenu>
              <h:message for="brandID2" />
              <h:outputLabel value="last submitted value:" for="brandOutputID2" />
              <b:inputText value="#num;{selectOneMenuBean.brand}" disabled="true" id="brandOutputID2" />
]]>
       </script>
          </b:well>
        </b:tab>
        <b:tab title="displayed as">
          <b:well>
            <b:panelGrid colSpans="2,2,2,2,4">
              <h:outputLabel value="Select your car's brand:" for="brandID2" id="l1" />
              <b:selectOneMenu value="#{selectOneMenuBean.brand}" id="brandID2" onchange="console.log('change');"
                onselect="console.log('select');">
                <f:selectItem itemLabel="(Please select)" itemValue="" />
                <f:selectItem itemLabel="Fiat" itemValue="1" itemDisabled="true" />
                <f:selectItem itemLabel="Honda" itemValue="2" />
                <f:selectItem itemLabel="Opel" itemValue="3" itemDisabled="true" />
              </b:selectOneMenu>
              <h:message for="brandID2" />
              <h:outputLabel value="last submitted value:" for="brandOutputID2" />
              <b:inputText value="#{selectOneMenuBean.brand}" disabled="true" id="brandOutputID2" />
            </b:panelGrid>
            <b:commandButton value="Submit AJAX">
              <f:ajax execute="@form" render="brandOutputID2" />
            </b:commandButton>
          </b:well>
        </b:tab>
      </b:tabView>
    </h:form>


















        <h3>A note on AJAX</h3>
        <p>Note that since BootsFaces 0.8.0, we favor an 
        <a href="../forms/ajax.jsf">all-new approach to AJAX</a>. The standard JSF approach
        to AJAX we used in the example above is supported by us, too, but we recommend to adopt the new
        BootsFaces style of AJAX (i.e. <code>onclick="ajax:bean.method()"</code>). Supporting standard
        JSF AJAX and the PrimeFaces approach to AJAX raises the complexity of the implementation considerably.
        So if you run into bugs with either the standard or the PrimeFaces syntax,
        bear with us, and report the bugs <a target="#" href="https://github.com/TheCoder4eu/BootsFaces-OSP/issues">
        on our bug tracker</a>.</p> 
        
        <h1>Objects and converters</h1>
        <p>In most cases you don't need a converter to use an arbitrary object as bean attribute. It suffices to use the attributes <code>var</code>, <code>itemValue</code> and <code>itemLabel</code> of <code>&lt;f:selectItem /&gt;</code> and <code>&lt;f:selectItems /&gt;</code>.</p>
        <b:alert severity="danger" title="As of BootsFaces 0.8.0, converters aren't used correctly when rendering. In other words: the example below doesn't work." />  
        
        <h:form>
            <b:tabView activeIndex="3">
                <b:tab title="JSF markup">
                <b:well>
                    <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
                    <b:panelGrid colSpans="3,3,6">
                         <f:event listener="&num;{soccerTeamBean.init}" type="preRenderView" />
                        <h:outputLabel value="Select your team's goalkeeper:" for="keeperID" />
                        <b:selectOneMenu value="&num;{soccerTeamBean.goalkeeper}" id="keeperID">
                            <f:selectItems value="&num;{soccerTeamBean.team}" var="playerVar" itemValue="&num;{playerVar}"
                                itemLabel="&num;{playerVar.name}" />
                        </b:selectOneMenu>
                        Current keeper: &num;{soccerTeamBean.goalkeeper.name}
                    </b:panelGrid>
                    <b:commandButton value="Submit (doesn't work yet)">
                        <f:ajax event="click" execute="@form" render="@form" />
                    </b:commandButton>
]]>
                   </script>
                </b:well>
                </b:tab>
                                <b:tab title="Team bean">
                <b:well>
                    <script type="syntaxhighlighter" class="brush: java; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
@ManagedBean
@ViewScoped
public class SoccerTeamBean implements Serializable {
    private static final long serialVersionUID = 1L;

    private List<Player> team;
    private Player goalkeeper;

    public void init(ComponentSystemEvent e) {
        this.team = new ArrayList<>();
        this.team.add(new Player("Marc-André ter Stegen"));
        this.team.add(new Player("Jordi Masip"));
        this.team.add(new Player("Jordi Alba"));
        this.team.add(new Player("Marc Batra"));
    }

    public List<Player> getTeam() {
        return team;
    }

    public void setTeam(List<Player> team) {
        this.team = team;
    }

    public Player getGoalkeeper() {
        return goalkeeper;
    }

    public void setGoalkeeper(Player goalkeeper) {
        this.goalkeeper = goalkeeper;
    }
}
]]>
                   </script>
                   </b:well>
                </b:tab>
                                <b:tab title="Player class">
                                                <b:well>
                                
                    <script type="syntaxhighlighter" class="brush: java; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
public class Player {

    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Player(String name) {
        this.name = name;
    }
}
]]>
                   </script>
                   </b:well>
                </b:tab>
                
                <b:tab title="displayed as">
                <b:well>
                    <b:panelGrid colSpans="3,3,6">
                        <f:event listener="#{soccerTeamBean.init}" type="preRenderView" />
                        <h:outputLabel value="Select your team's goalkeeper:" for="keeperID" />
                        <b:selectOneMenu value="#{soccerTeamBean.goalkeeper}" id="keeperID">
                            <f:selectItems value="#{soccerTeamBean.team}" var="playerVar" itemValue="#{playerVar}"
                                itemLabel="#{playerVar.name}" />
                        </b:selectOneMenu>
                        Current keeper: #{soccerTeamBean.goalkeeper.name}
                    </b:panelGrid>
                    <b:commandButton value="Submit (doesn't work yet)">
                        <f:ajax  event="click" execute="@form" render="@form" />
                    </b:commandButton>
                    </b:well>
                </b:tab>
            </b:tabView>
        </h:form>
        
        
        <h1>Arrays and HashMaps</h1>
        <p>The list of items can be defined as an <code>&lt;f:selectItems /&gt;</code> tag. BootsFaces uses a modified version of the 
        algorithm PrimeFaces 5.1 uses to implement <code>&lt;f:selectItems /&gt;</code>. As a result, you can use <code>&lt;b:selectOneMenu&gt;</code>
        almost the same way as <code>&lt;b:selectOneMenu&gt;</code>. </p>
        <h:form>
<b:tabView activeIndex="0">
    <b:tab title="JSF markup">
                    <b:well>
    
       <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
	        <b:panelGrid colSpans="2,2,8">
	        	<h:outputLabel value="Traffic light color" />
			    <b:selectOneMenu value="&num;{semaphoreBean.color}"  >
		    		<f:selectItems value="&num;{semaphoreBean.colors}" var="c" itemValue="&num;{c}" itemLabel="&num;{c}"/>
			    </b:selectOneMenu>
			    <h:outputLabel value="" />
			    <h:outputLabel value="Traffic light meaning" />
			    <b:selectOneMenu value="&num;{semaphoreBean.meaning}"  >
		    		<f:selectItems value="&num;{semaphoreBean.meanings}"/>
			    </b:selectOneMenu>
			    <h:outputLabel value="" />
		    </b:panelGrid>
]]>
       </script>
       </b:well>
    </b:tab>
    <b:tab title="Java bean">
                <b:well>
       <script type="syntaxhighlighter" class="brush: java; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
@javax.faces.bean.RequestScoped
@ManagedBean
public class SemaphoreBean {
	@NotNull
	private String color = null;

	@NotNull
	private String meaning = null;

	private List<String> colors;

	private Map<String, String> meanings;

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public String getMeaning() {
		return meaning;
	}

	public void setMeaning(String meaning) {
		this.meaning = meaning;
	}

	public List<String> getColors() {
		return colors;
	}

	public void setColors(List<String> colors) {
		this.colors = colors;
	}

	public Map<String, String> getMeanings() {
		return meanings;
	}

	public void setMeanings(Map<String, String> meanings) {
		this.meanings = meanings;
	}

	{
		colors = Arrays.asList("green", "yellow", "red");
		meanings = new HashMap<String, String>();
		meanings.put("go", "green");
		meanings.put("be alert", "yellow");
		meanings.put("stop", "red");
	}
}
]]>
       </script>
       </b:well>)
    </b:tab>
    
    
    <b:tab title="displayed as">
                <b:well>
	        <b:panelGrid colSpans="2,2,8">
	        	<h:outputLabel value="Traffic light color" />
			    <b:selectOneMenu value="#{semaphoreBean.color}"  >
		    		<f:selectItems value="#{semaphoreBean.colors}" var="c" itemValue="#{c}" itemLabel="#{c}"/>
			    </b:selectOneMenu>
			    <h:outputLabel value="" />
			    <h:outputLabel value="Traffic light meaning" />
			    <b:selectOneMenu value="#{semaphoreBean.meaning}"  >
		    		<f:selectItems value="#{semaphoreBean.meanings}"/>
			    </b:selectOneMenu>
			    <h:outputLabel value="" />
		    </b:panelGrid>
            </b:well>
    </b:tab>
</b:tabView>
        </h:form>
        
        
        
                <h1>Labels as captions above the combobox</h1>
                <p>You can add a label to the combobox by jotting down the attribute <code>label</code>.
                This label is displayed above the combobox.</p>
<b:tabView>
  <b:tab title="JSF markup">
                  <b:well>
  
    <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
    <h:form>
    	<h:panelGrid columns="4" cellpadding="5">
		    <b:selectOneMenu value="&num;{selectOneMenuBean.brand}" label="Select your car's brand:">
				    <f:selectItem itemLabel="Fiat" itemValue="1"/>
				    <f:selectItem itemLabel="Honda" itemValue="2"/>
				    <f:selectItem itemLabel="Opel" itemValue="3"/>
		    </b:selectOneMenu>
		    <h:message for="brandID"/>
		    <b:inputText value="&num;{selectOneMenuBean.brand}" disabled="true" label="last submitted value:"/>
		    <b:selectOneMenu value="&num; {selectOneMenuBean.type}" label="Select your car's type:" id="typeID">
		    		<f:selectItem itemLabel="Cinquecento" itemValue="1"/>
				    <f:selectItem itemLabel="Civic" itemValue="2"/>
				    <f:selectItem itemLabel="Astra" itemValue="3"/>
		    </b:selectOneMenu>
		    <h:message  for="typeID" />
		    <b:inputText value="&num;{selectOneMenuBean.type}" disabled="true" label="last submitted value:"/>
        </h:panelGrid>
    </h:form>
]]>
    </script>
    </b:well>
  </b:tab>
  <b:tab title="displayed as">
                  <b:well>
  
    <h:form>
    	<h:panelGrid columns="3"  cellpadding="5">
		    <b:selectOneMenu value="# {selectOneMenuBean.brand}" label="Select your car's brand:" id="brandID2">
				    <f:selectItem itemLabel="Fiat" itemValue="1"/>
				    <f:selectItem itemLabel="Honda" itemValue="2"/>
				    <f:selectItem itemLabel="Opel" itemValue="3"/>
		    </b:selectOneMenu>
		    <h:message showSummary="false"  for="brandID2"/>
		    <b:inputText value="#{selectOneMenuBean.brand}" disabled="true" label="a last submitted value:"/>
		    <b:selectOneMenu value="#{selectOneMenuBean.type}" label="Select your car's type:" id="typeID2">
		    		<f:selectItem itemLabel="Cinquecento" itemValue="1"/>
				    <f:selectItem itemLabel="Civic" itemValue="2"/>
				    <f:selectItem itemLabel="Astra" itemValue="3"/>
		    </b:selectOneMenu>
		    <h:message for="typeID2"/>
		    <b:inputText value="#{selectOneMenuBean.type}" disabled="true" label="b last submitted value:"/>
        </h:panelGrid>
    </h:form>
  </b:well>
  </b:tab>
</b:tabView>
                           
                
                               
               <h2>Labels, required fields and error messages  <b:badge value="since 0.8.0" /></h2>
               <p>You can add a label by adding the attribute <code>label</code>. The label is also used by the JSF messages. To give you maximum flexibility,
               you can suppress automatic rendering of labels by adding <code>renderLabel="false"</code>.
               </p>
               <p>Required inputs fields and their labels both bear the CSS class <code>bf-required</code>. By default, this adds an asterisk to the label.</p>
               <p>If the field has a FacesMessage, one of the CSS classes <code>bf-info</code>, <code>bf-warning</code>, 
                   <code>bf-error</code> or <code>bf-fatal</code>, depending on which error severity the message has.
                   The latter two classes color the label red.</p>
                <p>If there's no message,
                   the field and its label bear the pseudo CSS class <code>bf-no-message</code>.
               </p>
                


                <h2>AJAX and JavaScript  <b:badge value="since 0.8.0" /></h2>
                <p>The <code>&lt;b:selectBooleanCheckbox &gt;</code> supports the full suite of JavaScript and AJAX events,
                as described in <a href="ajax.jsf">the description of AJAX in BootsFaces</a>. Basically, each of the
                many JavaScript callback handlers (the <code>on[event]</code> attributes) also supports AJAX.
                To get familiar with BootsFaces AJAX, try the 
                <a target="#" href="https://github.com/stephanrauh/BootsFaces-Examples/tree/master/AJAX">BootsFaces AJAX demo project</a>.</p>

                <h1>Reference section</h1>
                <ui:include src="SelectOneMenuAttributes.xhtml" />
 
            <b:panel look="info">
				<f:facet name="heading">
					<b>Skinning</b>
				</f:facet>
				<ul>
					<li>
				   		The combobox is a <code>select</code> tag bearing the CSS-class <code>form-control</code>.
				   </li>
				   <li>
				   		If the attribute <code>required</code> is true, the pseudo CSS class <code>bf-required</code> is added. 
                        Thus you can define your custom style for required fields.
				   </li>
                   <li>
                   If there's a <code>FacesMessage</code>, the input field is bears one of the pseudo CSS classes
                   <code>bf-info</code>, <code>bf-warning</code>, <code>bf-error</code> or <code>bf-fatal</code>. If there are no messages,
                   the input field bears the pseudo CSS class <code>bf-no-message</code>.
                   </li>
                   <li>If there's a label, if bears the CSS class <code>required</code>, if it's a mandatory field.
                   This class adds an asterisk to the label text. You can override the CSS class to remove the asterisk
                   or to replace it by something else.</li>
                   <li>If there's a label, if bears the CSS classes <code>bf-info</code>, <code>bf-warning</code>, 
                   <code>bf-error</code> or <code>bf-fatal</code>, depending on which severity the error message the input field has.
                   The latter two classes color the label red.<br />
                   If there's no message,
                   the input field bears the pseudo CSS class <code>bf-no-message</code>.
                   </li>
				  </ul> 
			</b:panel>
                
                <script type="text/javascript">
                    SyntaxHighlighter.all();
                </script>
                <br/><br/><br/><br/>
            </ui:define>
</ui:composition>
