<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:b="http://bootsfaces.net/ui"
      xmlns:ui="http://java.sun.com/jsf/facelets">

            <ui:define name="content">
                <style>td {padding: 8px;}</style>
                <h1>InputText</h1>

                <p>The most common form controls are text-based input fields. </p>
                <p>Future versions of BootsFaces will try to add support for the most relevant HTML5 types:</p>
                <p>text, password, datetime, datetime-local, date, month, time, week, number, email, url, search, tel, and color.</p>
                <br/>
                <p>The most simple example is a plain <code>b:inputText</code> with a <code>placeholder</code> attribute, which contains an hint that is shown in the input field until something is typed in it.
                This is how such a simple inputText looks like if we add a bit of AJAX functionality to it:</p>
                <b:tabView>
                  <b:tab title="preview">
                   <h:form>
                     <b:inputText placeholder="Type something here..." value="#{barcodeBean.emptyText}">
                        <f:ajax event="keyup" render="label" listener="#{barcodeBean.capitalizeURL}" />
                        </b:inputText>
                        <b:label text="#{barcodeBean.emptyTextCapital}" id="label"/>
                    </h:form>
                 </b:tab>
                 <b:tab title="JSF markup">
                   <b:well>
                     <script type="syntaxhighlighter"
                       class="brush: xml; toolbar: false;gutter: false; first-line: 1">
                  <![CDATA[
                 <h:form>
                     <b:inputText placeholder="Type something here..." value="&num;{barcodeBean.emptyText}">
                        <f:ajax event="keyup" render="label" listener="&num;{barcodeBean.capitalizeURL}" />
                        </b:inputText>
                        <b:label text="&num;{barcodeBean.emptyTextCapital}" id="label"/>
                    </h:form>
                 ]]>
                 </script>
                   </b:well>
                 </b:tab>
                </b:tabView>
                <br />
                <p>As you noticed, the input is as large as its parent container. You will see how to control its size later in this section.</p>
                <br/>
                <h3>Enhancing the b:inputText form control</h3>
                <p>To help you enhance the user experience, BootsFaces comes in with a useful feature:</p>
                <p>You can easily prepend or append text to your inputTexts and what you prepend and append will seem part of the input field.</p>
                <p>To do so, you just need to use the facets <code>prepend</code> and <code>append</code> where you will place the <code>h:outputText</code> element.</p>
                <p>You can even prepend and append at the same time, as in the following example:</p>
                <b:panel >
                    <f:facet name="heading"><b>EXAMPLE</b></f:facet>
                        <h:form>
                            <h:panelGrid columns="2"  cellpadding="5">
                                <h:outputText value="e-mail:"/>
                                <b:inputText>
                                    <f:facet name="prepend">
                                        <h:outputText value="@" />
                                    </f:facet>
                                </b:inputText>
                                <h:outputText value="Amount:"/>
                                <b:inputText>
                                    <f:facet name="append">
                                        <h:outputText value=".00" />
                                    </f:facet>
                                </b:inputText>
                                <h:outputText value="Price:"/>
                                <b:inputText>
                                    <f:facet name="prepend">
                                        <h:outputText value="$" />
                                    </f:facet>
                                    <f:facet name="append">
                                        <h:outputText value=".00" />
                                    </f:facet>
                                </b:inputText>
                            </h:panelGrid>
                        </h:form>
                <f:facet name="footer">
                <strong>Markup:</strong><br/>
                <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                    <![CDATA[
                    <h:form>
                        <h:panelGrid columns="2" cellpadding="5">
                            <h:outputText value="e-mail:"/>
                            <b:inputText>
                                <f:facet name="prepend">
                                    <h:outputText value="@" />
                                </f:facet>
                            </b:inputText>
                            <h:outputText value="Amount:"/>
                            <b:inputText>
                                <f:facet name="append">
                                    <h:outputText value=".00" />
                                </f:facet>
                            </b:inputText>
                            <h:outputText value="Price:"/>
                            <b:inputText>
                                <f:facet name="prepend">
                                    <h:outputText value="$" />
                                </f:facet>
                                <f:facet name="append">
                                    <h:outputText value=".00" />
                                </f:facet>
                            </b:inputText>
                        </h:panelGrid>
                    </h:form>]]></script>
                    </f:facet>
                </b:panel>
                <p>Finally, you can go further and prepend or append more text elements, as in the following example:</p>
                <b:panel>
                    <f:facet name="heading"><b>EXAMPLE</b></f:facet>
                    <h:form>
                        <h:panelGrid columns="2" cellpadding="10">

                            <h:outputText value="Your Bid:"/>

                            <b:inputText value="99">
                                <f:facet name="prepend">
                                    <h:outputText value="offer" />
                                    <h:outputText value="$" />
                                </f:facet>
                                <f:facet name="append">
                                    <h:outputText value=".00" />
                                    <h:outputText value="cash" />
                                </f:facet>
                            </b:inputText>
                        </h:panelGrid>
                    </h:form>
                    <f:facet name="footer">
                        <strong>Markup:</strong><br/>
                        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
                        <![CDATA[
                        <h:form>
                            <h:panelGrid columns="2" cellpadding="5">
                                <h:outputText value="Your Bid:"/>
                                <b:inputText value="99" span="1">
                                    <f:facet name="prepend">
                                        <h:outputText value="offer" />
                                        <h:outputText value="$" />
                                    </f:facet>
                                    <f:facet name="append">
                                        <h:outputText value=".00" />
                                        <h:outputText value="cash" />
                                    </f:facet>
                                </b:inputText>
                            </h:panelGrid>
                        </h:form>]]></script>
                    </f:facet>
                </b:panel>
                <h4>Appending or prepending Icons</h4><br/>
                <p>You can take advantage of the <code>&lt;b:icon&gt;</code> or <code>&lt;b:iconAwesome&gt;</code> components to append (or prepend) <h:link outcome="/layout/icons" value="Icons"/> :</p>
                <h:form>
                    <h:panelGrid columns="2"  cellpadding="5">
                        <h:outputText value="username:"/>
                        <b:inputText placeholder="Username" required="true">
                            <f:facet name="prepend">
                                <b:icon name="user" />
                            </f:facet>
                        </b:inputText>
                        <h:outputText value="Password:"/>
                        <b:inputText placeholder="Password">
                            <f:facet name="prepend">
                                <b:iconAwesome name="key" />
                            </f:facet>
                        </b:inputText>
                    </h:panelGrid>
                </h:form>
                <h4>Appending or prepending Buttons</h4><br/>
                <p>Another nice feature is that you can append (or prepend) buttons:</p>
                <b:panel>
                    <f:facet name="heading"><b>EXAMPLE</b></f:facet>
                    <h:form id="bid" prependId="false" >
                        <h:panelGrid columns="2" cellpadding="5">
                            <h:outputText value="Your Offer:"/>
                            <b:inputText id="mybid" value="#{testBean.val6}">
                                <f:facet name="prepend">
                                    <h:outputText value="$" />
                                </f:facet>
                                <f:facet name="append">
                                    <b:commandButton look="primary" value="Bid!" ajax="true" update="amodal" oncomplete="$('#amodal').modal('show');"/>
                                    <b:button look="danger" value="Reset" onclick="$('#input_mybid').val('');return false;"/>
                                </f:facet>
                            </b:inputText>
                        </h:panelGrid>
                    </h:form>
                </b:panel>
                <p>allowing you to build compact mini-forms for specific actions with little effort.</p>
                <p class="text-warning">There is only one limitation: you can not prepend or append mixed texts and buttons.
                    The elements on each side can be only of the same type. For instance, it's possible to prepend text elements and append buttons.
                    But it's not possible to prepend both a text element and a button at the same time.</p>

                <b:modal id="amodal" title="Bid for this Item">
                    <h4>Congratulations!</h4>
                <h:panelGrid columns="2">
                    <h:outputText value="You offered $" />
                    <h:outputText value="#{testBean.val6}" />
                </h:panelGrid>
                <f:facet name="footer">
                    <b:button value="close" dismiss="modal" onclick="return false;"/>
                </f:facet>
                </b:modal>

                <h4>Appending or prepending DropButtons</h4><br/>
                <p>What you have seen also applies to DropButtons:</p>
                <b:panel>
                    <f:facet name="heading"><b>EXAMPLE</b></f:facet>
                    <h:form>
                        <b:row>
                            <b:column span="6">
                                <b:inputText placeholder="Text">
                                    <f:facet name="prepend">
                                        <b:dropButton value="DropButton">
                                            <b:navLink value="Action" href="#"></b:navLink>
                                            <b:navLink value="Another action" href="#"></b:navLink>
                                            <b:navLink value="Something else here" href="#"></b:navLink>
                                            <b:navLink></b:navLink>
                                            <b:navLink header="Nav header"></b:navLink>
                                            <b:navLink value="Separated link" href="#"></b:navLink>
                                            <b:navLink value="One more separated link" href="#"></b:navLink>
                                        </b:dropButton>
                                        <h:outputText value="www" />
                                    </f:facet>
                                </b:inputText>
                            </b:column>
                            <b:column span="6">
                                <b:inputText placeholder="Text">
                                    <f:facet name="append">
                                        <b:dropButton value="DropButton">
                                            <b:navLink value="Action" href="#"></b:navLink>
                                            <b:navLink value="Another action" href="#"></b:navLink>
                                            <b:navLink value="Something else here" href="#"></b:navLink>
                                            <b:navLink></b:navLink>
                                            <b:navLink header="Nav header"></b:navLink>
                                            <b:navLink value="Separated link" href="#"></b:navLink>
                                            <b:navLink value="One more separated link" href="#"></b:navLink>
                                        </b:dropButton>
                                    </f:facet>
                                </b:inputText>
                            </b:column>
                        </b:row>
                    </h:form>
                </b:panel>

                <h4>Controlling the size of b:inputText</h4>
                <br/>
                <strong>Height sizing</strong>
                <p>You can create larger or smaller form controls that match button sizes.</p>
                <p>Use the <code>fieldSize</code> attribute for predefined input field sizes:</p>
                <b:well>
                    <strong>Input sizes (fieldSize)</strong><br/>
                    <h:panelGrid cellpadding="5">
                        <h:form>
                            <b:inputText fieldSize="sm" placeholder="small (sm)"/>
                            <b:inputText placeholder="default"/>
                            <b:inputText fieldSize="lg" placeholder="large (lg)"/>
                        </h:form>
                    </h:panelGrid>

                </b:well>
                <h4>Grid sizing</h4>
                <p>If your inputText is not in a panelGrid(table) or is not already in a b:column of your grid layout,
                    BootsFaces can place the component in a column for you, allowing you to easily control its size.</p>
                <p>Use <code>span="1"</code> to <code>span="12"</code> for inputs that match the same sizes of the BootsFaces grid columns:</p>
				<b:tabView>
					<b:tab title="displayed as">
						<b:well style="height:536px">
							<strong>Input sizes</strong>
							<br />
	                    In a row:
			                    <b:row>
								<h:form>
									<b:inputText span="1" placeholder="span1" />
									<b:inputText span="2" placeholder="span 2" />
									<b:inputText span="3" placeholder="span 3" />
								</h:form>
							</b:row>
							<br />
	                    or in a Form:
			                    <h:form styleClass="form-horizontal">
								<b:inputText span="1" placeholder="span1" />
								<b:inputText span="2" placeholder="span 2" />
								<b:inputText span="3" placeholder="span 3" />
								<b:inputText span="6" placeholder="span 6" />
								<b:inputText span="9" placeholder="span 9" />
								<b:inputText span="12" placeholder="span 12" />
							</h:form>
						</b:well>
					</b:tab>
					<b:tab title="JSF markup">
					<b:well>
						<script type="syntaxhighlighter"
							class="brush: xml; toolbar: false;gutter: false; first-line: 1">
							<![CDATA[
					<b:well>
						<strong>Input sizes</strong>
						<br />
                    In a row:
		                    <b:row>
							<h:form>
								<b:inputText span="1" placeholder="span1" />
								<b:inputText span="2" placeholder="span 2" />
								<b:inputText span="3" placeholder="span 3" />
							</h:form>
						</b:row>
						<br />
                    or in a Form:
		                    <h:form styleClass="form-horizontal">
							<b:inputText span="1" placeholder="span1" />
							<b:inputText span="2" placeholder="span 2" />
							<b:inputText span="3" placeholder="span 3" />
							<b:inputText span="6" placeholder="span 6" />
							<b:inputText span="9" placeholder="span 9" />
							<b:inputText span="12" placeholder="span 12" />
						</h:form>
					</b:well>
            ]]>
					       </script>
					   </b:well>
					</b:tab>
				</b:tabView>

                <br/>

                <h2>AJAX and JavaScript  <b:badge value="since 0.8.0" /></h2>
                <p>The <code>&lt;b:inputText &gt;</code> supports the full suite of JavaScript and AJAX events,
                as described in <a href="ajax.jsf">the description of AJAX in BootsFaces</a>. Basically, each of the
                many JavaScript callback handlers (the <code>on[event]</code> attributes) also supports AJAX.
                To get familiar with BootsFaces AJAX, try the
                <a target="#" href="https://github.com/stephanrauh/BootsFaces-Examples/tree/master/AJAX">BootsFaces AJAX demo project</a>.</p>

                <h2>JSF 2.2 pass-through attributes</h2>
                <p>It's possible to use pass-through attributes with the <code>&lt;b:inputText</code> widget, but there's a twist: the attributes are added multiple times.
                This is because there are several plausible places to put a pass-through attribute in, so we decided to leave it as it is.</p>
                <p>For instance, consider this JSF snippet:</p>
  					<b:well>
						<script type="syntaxhighlighter"
							class="brush: xml; toolbar: false;gutter: false; first-line: 1">
							<![CDATA[
				  				<b:inputText  value="&num;{userBean.name}" label="Enter your name"
						                      ng:ng-model="name" />
								<b:inputText  value="&num;{userBean.age}" label="How old are you?"
              								  ng:type="number" ng:min="5" ng:max="125" ng:ng-model="age" />
]]>
					       </script>
					 </b:well>
				<p>The generated HTML code looks like so:</p>
               <h:graphicImage library="passthrough" name="generatedHtml.png" />

               <h2>Labels, required fields and error messages  <b:badge value="updated in 0.8.0" /></h2>
               <p>You can add a label by adding the attribute <code>label</code>. The label is also used by the JSF messages. To give you maximum flexibility,
               you can suppress automatic rendering of labels by adding <code>renderLabel="false"</code>.
               </p>
               <p>Required inputs fields and their labels both bear the CSS class <code>bf-required</code>. By default, this adds an asterisk to the label.</p>
               <p>If the field has a FacesMessage, one of the CSS classes <code>bf-info</code>, <code>bf-warning</code>,
                   <code>bf-error</code> or <code>bf-fatal</code>, depending on which error severity the message has.
                   The latter two classes color the label red.</p>
                <p>If there's no message,
                   the field and its label bear the pseudo CSS class <code>bf-no-message</code>  and <code>has-success</code>. The latter colors the label green by default.
               </p>
            <b:tabView>
              <b:tab title="displayed as">
              <b:well>
                <h:form>
                  <b:inputText id="name" value="#{userBean.name}"
                    label="Enter your name" required="true" renderLabel="true" />
                  <h:message for="name" />
                  <b:inputText id="age" value="#{userBean.age}"
                    label="What's your age?" renderLabel="true" />
                  <h:message for="age" />
                  <b:commandButton update="@form" value="Validate constraints" />
                </h:form>
                </b:well>
              </b:tab>
              <b:tab title="JSF markup">
                <b:well>
                  <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
				  <![CDATA[
                     <h:form>
                        <b:inputText id="name" value="&num;{userBean.name}" label="Enter your name"
								     required="true" renderLabel="true"   />
                         <h:message for="name" />
                         <b:inputText id="age" value="&num;{userBean.age}" label="What's your age?"
                                      renderLabel="true" />
                         <h:message for="age" />
                         <b:commandButton update="@form" value="Validate constraints" />
                       </h:form>
                  ]]>
                 </script>
                </b:well>
              </b:tab>
            </b:tabView>
            
            <h2>Bean Validation API (JSR 303 and JSR 349) <b:badge value="since 1.1.0" /></h2>
            <b:tabView>
              <b:tab title="displayed as">
              <b:well>
                <h:form>
                  <b:inputText id="name" value="#{beanValidationBean.name}"
                    label="Enter your name" renderLabel="true" />
                  <b:message for="@previous" />
                  <b:inputText id="age" value="#{beanValidationBean.age}"
                    label="What's your age?" renderLabel="true" />
                  <b:message for="@previous" />
                  <b:commandButton update="@form" value="Validate constraints" />
                  <b:messages redisplay="false"/>
                </h:form>
                </b:well>
              </b:tab>
              <b:tab title="JSF markup">
                <b:well>
                  <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
				  <![CDATA[
                     <h:form>
                        <b:inputText id="name" value="&num;{beanValidationBean.name}" label="Enter your name"
								     renderLabel="true"   />
                         <h:message for="name" />
                         <b:inputText id="age" value="&num;{beanValidationBean.age}" label="What's your age?"
                                      renderLabel="true" />
                         <h:message for="age" />
                         <b:commandButton update="@form" value="Validate constraints" />
                       </h:form>
                  ]]>
                 </script>
                </b:well>
              </b:tab>
             <b:tab title="Java bean">
                <b:well>
                  <script type="syntaxhighlighter"
                    class="brush: java; toolbar: false;gutter: false; first-line: 1">
				  <![CDATA[
@ManagedBean
@RequestScoped
public class BeanValidationBean {
	@NotNull(message="Your name is as important as you are. Don't hesitate to fill this field!")
	@Size(min=1, max=10)
	private String name;
	
	@Min(value=18, message="In most countries, you're not considered a grown-up yet.")
	@Max(value=65, message="In many countries, you've already reached retirement age.")
	private int age;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
}
                  ]]>
                 </script>
                </b:well>
              </b:tab>
            </b:tabView>
            
            
            <h2>Inline forms <b:badge value="improved in 1.0.0" /></h2>
            <p>Until BootsFaces 0.9.1, you could define inline forms, but the input fields weren't aligned correctly. Hence, BootsFaces 1.0.0 adds
            the option <code>label-col-xx</code>, which causes BootsFaces to generate correct Bootstrap HTML code. Alternatively to using the
            technical names you can also use symbolic names to define the label width.</p>
            <p>You can still use <code>inline="true"</code> along with <code>label-col-xx="y"</code>. In this case, the input field doesn't
            fill the row completely.</p>
            <b:tabView>
              <b:tab title="displayed as">
	              <b:well style="height:180px">
	                <h:form>
	                  <b:inputText id="name" value="#{userBean.name}" col-xs="8" label-col-xs="4" 
	                    label="Enter your name" required="true" renderLabel="true" />
	                  <b:inputText id="age" value="#{userBean.age}" tiny-screen="two-thirds" label-tiny-screen="one-third"
	                    label="What's your age?" renderLabel="true" />
	                </h:form>
	              </b:well>
              </b:tab>
              <b:tab title="JSF markup">
	              <b:well style="height:180px">
                  <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
				  <![CDATA[
    	              <b:well>
    	                <h:form>
    	                  <b:inputText id="name" value="&num;{userBean.name}" col-xs="8" label-col-xs="4"
    	                    label="Enter your name" required="true" renderLabel="true" />
    	                  <b:inputText id="age" value="&num;{userBean.age}" tiny-screen="two-thirds" label-tiny-screen="one-third"
    	                    label="What's your age?" renderLabel="true" />
    	                </h:form>
    	              </b:well>
                  ]]>
                 </script>
                </b:well>
              </b:tab>
              <b:tab title="old version displayed as">
	              <b:well style="height:180px">
	                <h:form>
	                  <b:inputText id="name" value="#{userBean.name}" col-xs="12" inline="true"
	                    label="Enter your name" required="true" renderLabel="true" />
	                  <b:inputText id="age" value="#{userBean.age}" tiny-screen="two-thirds" inline="true"
	                    label="What's your age?" renderLabel="true" />
	                </h:form>
	              </b:well>
              </b:tab>
              <b:tab title="old JSF markup">
 	             <b:well style="height:180px">
                   <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
				  <![CDATA[
    	              <b:well>
    	                <h:form>
    	                  <b:inputText id="name" value="&num;{userBean.name}" col-xs="12" inline="true"
    	                    label="Enter your name" required="true" renderLabel="true" />
    	                  <b:inputText id="age" value="&num;{userBean.age}" tiny-screen="two-thirds" label-tiny-screen="one-third"
    	                    label="What's your age?" renderLabel="true" />
    	                </h:form>
    	              </b:well>
                  ]]>
                 </script>
                </b:well>
              </b:tab>
              <b:tab title="new markup with inline">
	              <b:well style="height:180px">
	                <h:form>
	                  <b:inputText id="name" value="#{userBean.name}" col-xs="8" label-col-xs="4" inline="true"
	                    label="Enter your name" required="true" renderLabel="true" />
	                  <b:inputText id="age" value="#{userBean.age}" tiny-screen="two-thirds" label-tiny-screen="one-third"
	                    label="What's your age?" renderLabel="true" inline="true" />
	                </h:form>
	              </b:well>
              </b:tab>
              <b:tab title="new JSF markup with inline">
	              <b:well style="height:180px">
                  <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
				  <![CDATA[
    	              <b:well>
    	                <h:form>
    	                  <b:inputText id="name" value="&num;{userBean.name}" col-xs="8" label-col-xs="4" inline="true"
    	                    label="Enter your name" required="true" renderLabel="true" />
    	                  <b:inputText id="age" value="&num;{userBean.age}" tiny-screen="two-thirds" label-tiny-screen="one-third"
    	                    label="What's your age?" renderLabel="true" inline="true" />
    	                </h:form>
    	              </b:well>
                  ]]>
                 </script>
                </b:well>
              </b:tab>
            </b:tabView>
            
            
            <h2>Configuring the default value of the <code>renderLabel</code> attribute</h2>
            <p>Strictly speaking, BootsFaces adds a second meaning to an attribute that already exists. Standard JSF uses<code>label</code>
            to decorate <code>&lt;h:message /&gt;</code>. In order to minimize confusion, we decided to deactivate
            the label rendering feature of BootsFaces by default. However, at the end of the day, it's your application.
            So it's you who needs to be in charge. Starting with BootsFaces 0.8.5, you can add a context parameter to the
            <code>web.xml</code> of your application to set the default value of <code>renderLabel</code>. It goes without
            saying that you can use EL expressions with this attribute. We traded performance to give you maximum flexibility.</p>

             <b:tabView>
              <b:tab title="displayed as">
              <b:well>
                <h:form>
                  <b:inputText id="age" value="#{userBean.age}"
                    label="What's your age?" />
                  <h:message for="age" />
                  <b:commandButton update="@form" value="Toggle renderLabel default attribute" onclick="ajax:defaultValuesBean.toggleRenderLabel()"/>
                </h:form>
                </b:well>
              </b:tab>
              <b:tab title="JSF markup">
                <b:well>
                  <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
                     <h:form>
                          <b:inputText id="age" value="&num;{userBean.age}" label="What's your age?" />
                         <h:message for="age" />
                         <b:commandButton update="@form" value="Validate constraints" />
                         <b:commandButton update="@form" value="Toggle renderLabel default attribute" onclick="ajax:defaultValuesBean.toggleRenderLabel()"/>
                       </h:form>
                  ]]>
                 </script>
                </b:well>
              </b:tab>
              <b:tab title="web.xml">
                <b:well>
                  <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
    <context-param>
      <param-name>net.bootsfaces.defaults.renderLabel</param-name>
        <param-value>&num;{defaultValuesBean.renderLabel}</param-value>
    </context-param>
                  ]]>
                 </script>
                </b:well>
              </b:tab>
             <b:tab title="Java Bean">
                <b:well>
                  <script type="syntaxhighlighter"
                    class="brush: java toolbar: false;gutter: false; first-line: 1">
          <![CDATA[
@ManagedBean
@SessionScoped
public class DefaultValuesBean implements Serializable {
	private static final long serialVersionUID = 1L;

	private boolean renderLabel=true;

	public boolean isRenderLabel() {
		return renderLabel;
	}

	public void setRenderLabel(boolean renderLabel) {
		this.renderLabel = renderLabel;
	}

	public void toggleRenderLabel() {
		renderLabel=!renderLabel;
	}
}
                  ]]>
                 </script>
                </b:well>
              </b:tab>
            </b:tabView>

            <h2><code>id</code> vs. <code>fieldId</code>, or how to be compatible to JAAS <b:badge value="since 0.9.0" /></h2>
            <p>BootsFaces adds some Bootstrap code to the HTML input field. This often leads to problems with the ids.
            Intuitively, most developers expect the id of the <code>&lt;b:inputText&gt;</code> to be identical
            to the id of the <code>&lt;h:input&gt;</code> field. At the same time they expect that AJAX updates the
            input field when the update attribute is <code>&lt;b:inputText id="firstNameID" update="firstNameId" /&gt;</code>.
            </p>
            <p>
            To solve the problem, we've introduced a second id, the <code>fieldId</code>. The <code>fieldId</code>
            is the id of the input field itself, while the attribute <code>id</code> refers to the entire component.</p>
            <p>Similarly, you can optionally set the attribute <code>name</code>.</p>
            <p> Note that in this case the
            ids of the container are not added automatically. You are responsible to make the ids and names unique.</p>

            <p>This feature comes in handy if you're working with JAAS, which requires the id and the name of the field
            to be "j_username" and "j_password":
            </p>
            <b:tabView>
              <b:tab title="displayed as">
              <b:well>
                      <h:form id="loginForm">
                        <b:inputText id="usernameDiv" fieldId="j_username" name="j_username"
                                     value="#{loginBean.username}"
                                     label="Username" render-label="true"/>
                        <b:message for="@previous" />
                        <b:inputSecret id="passwordDiv" fieldId="j_password" name="j_password"
                                       value="#{loginBean.password}"
                                       label="Password"  render-label="true"/>
                        <b:message for="passwordDiv" />
                        <b:commandButton update="@form" value="Login" onclick="ajax:loginBean.login2()"/>
                      </h:form>
                </b:well>
              </b:tab>
              <b:tab title="JSF markup">
                <b:well>
                  <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
                    <![CDATA[
               		  <h:form id="loginForm">
                        <b:inputText id="usernameDiv" fieldId="j_username" name="j_username"
                                     value="&num;{loginBean.username}"
                                     label="Username" render-label="true"/>
                        <b:message for="@previous" />
                        <b:inputSecret id="passwordDiv" fieldId="j_password" name="j_password"
                                       value="&num;{loginBean.password}"
                                       label="Password"  render-label="true"/>
                        <b:message for="passwordDiv" />
                        <b:commandButton update="@form" value="Login" onclick="ajax:loginBean.login2()"/>
                      </h:form>
                    ]]>
                 </script>
                </b:well>
              </b:tab>
             <b:tab title="Generated HTML code">
                <b:well>
                  <script type="syntaxhighlighter"
                    class="brush: xml; toolbar: false;gutter: false; first-line: 1">
                    <![CDATA[
                         <div id="loginForm:usernameDiv" class="form-group">
                          <label for="input_loginForm:usernameDiv" class="bf-no-message">Username</label>
                          <input id="j_username" name="j_username"
                                 type="text" class="form-control bf-no-message">
                        </div>
                   ]]>
                 </script>
                </b:well>
              </b:tab>
            </b:tabView>

       <h2>Responsive design <b:badge value="since 0.9.0" /></h2>
        <p>You can use all the attributes controlling the responsive behaviour of <code>&lt;b:column /&gt;</code>
        also with <code>&lt;b:inputText /&gt;</code>. Note that this is equivalent to putting it into a
        <code>&lt;b:column /%gt;</code>. In particular, the id and the CSS styles are inside the column div.
        Among other things, this means that <code>rendered="false"</code> hides the input field, but not
        the surrounding <code>div</code>. In other words: the layout is preserved if the input field is hidden.</p>
        <h:form>
	       <b:tabView>
	          <b:tab title="live preview">
	          <b:well>
	             <b:row>
	                <b:inputText value="large-screen='full-width'" large-screen="full-width" />
	             </b:row>
	             <b:row style="padding-top:5px">
	                <b:inputText value="large-screen='one-third'" large-screen="one-third" />
	                <b:inputText value="large-screen='two-thirds'" large-screen="two-thirds" />
	             </b:row>
	             <b:row style="padding-top:5px">
	                <b:inputText value="small-screen='one-third'" small-screen="one-third" />
	                <b:inputText value="small-screen='two-thirds'" small-screen="two-thirds" />
	             </b:row>
	             <b:row style="padding-top:5px">
	                <b:inputText value="tiny-screen='one-fourth'" tiny-screen="one-fourth" />
	                <b:inputText value="tiny-screen='half' offset-sm='3'" tiny-screen="half" offset-sm="3" />
	             </b:row>
	          </b:well>
	          </b:tab>
	          <b:tab title="JSF markup">
	          <b:well>
	          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
             <![CDATA[
             <b:row>
                <b:inputText value="large-screen='full-width'" large-screen="full-width" />
             </b:row>
             <b:row style="padding-top:5px">
                <b:inputText value="large-screen='one-third'" large-screen="one-third" />
                <b:inputText value="large-screen='two-thirds'" large-screen="two-thirds" />
             </b:row>
             <b:row style="padding-top:5px">
                <b:inputText value="small-screen='one-third'" small-screen="one-third" />
                <b:inputText value="small-screen='two-thirds'" small-screen="two-thirds" />
             </b:row>
             <b:row style="padding-top:5px">
                <b:inputText value="tiny-screen='one-fourth'" tiny-screen="one-fourth" />
                <b:inputText value="tiny-screen='half' offset-sm='3'" tiny-screen="half" offset-sm="3" />
             </b:row>
             ]]></script>
	          </b:well>
	          </b:tab>
	        </b:tabView>
        </h:form>

        <h2>Visibility depending on screen size <b:badge value="since 0.8.6/0.9.0" /></h2>
        <p>You can play also with col-*-*, visible and hidden attribute, as any bootstrap elements. For example:</p>
        <br/>
        <h:form>
	        <b:tabView>
	          <b:tab title="live preview">
	          <b:well>
	               <b:panelGrid colSpans="3,9">
	                  <h:outputText value="Visible on &gt;= md:" />
	                  <b:inputText value="Visible on medium or large screen" severity="info" visible="md..." />
	                  <h:outputText value="Visible on &lt;= sm:" />
	                  <b:inputText value="Visible on small-screen" severity="success" visible="...sm"/>
	                  <h:outputText value="Visible on sm...lg:" />
	                  <b:inputText value="Visible on small to large screen" severity="success" visible="sm...lg"/>
	                  <h:outputText value="Visible on xs and md:" />
	                  <b:inputText value="Visible on tiny and medium screen" severity="success" visible="xs,md"/>
	                  <h:outputText value="Col-md-6, offset 2:" />
	                  <b:inputText value="col-md-6, offset 2" severity="success" col-md="6" offset="2" />
	               </b:panelGrid>
	         </b:well>
	          </b:tab>
	          <b:tab title="JSF markup">
	          <b:well>
	          <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
             <![CDATA[
               <b:panelGrid colSpans="3,9">
                  <h:outputText value="Visible on &gt;= md:" />
                  <b:inputText value="Visible on medium or large screen" severity="info" visible="md..." />
                  <h:outputText value="Visible on &lt;= sm:" />
                  <b:inputText value="Visible on small-screen" severity="success" visible="...sm"/>
                  <h:outputText value="Visible on sm...lg:" />
                  <b:inputText value="Visible on small to large screen" severity="success" visible="sm...lg"/>
                  <h:outputText value="Visible on xs and md:" />
                  <b:inputText value="Visible on tiny and medium screen" severity="success" visible="xs,md"/>
                  <h:outputText value="Col-md-6, offset 2:" />
                  <b:inputText value="col-md-6, offset 2" severity="success" col-md="6" offset="2" />
               </b:panelGrid>
             ]]></script>
	          </b:well>
	          </b:tab>
	        </b:tabView>
        </h:form>

        <h2>Tags <b:badge value="since 0.9.0" /></h2>
        <p>By setting the attribute <code>tags="true"</code> you can display the input values as tag - similar to
        <code>&lt;b:badge /></code> or to price tags in the supermarket. The tags are separated by commas. Users can
        separate tags either by tying a comma or by hitting the <code>return</code> key.</p>
        <p>We've dedicated a special <a href="inputTextWithTags.jsf">showcase page to the input text tags</a>.</p>

        <h2>Reference section</h2>
            <ui:include src="InputTextAttributes.xhtml" />

        <b:panel look="info">
  	<f:facet name="heading">
  		<b>Skinning</b>
  	</f:facet>
  	<ul>
  		<li>
  	   		<code>&lt;b:inputfield /&gt;</code> is an <code>input</code> tag bearing the CSS-class <code>form-control</code>.
  	   </li>
  	   <li>
  	   		If the attribute <code>required</code> is true, the pseudo CSS class <code>bf-required</code> is added.
                    Thus you can define your custom style for required fields.
  	   </li>
               <li>
               If there's a <code>FacesMessage</code>, the input field is bears one of the pseudo CSS classes
               <code>bf-info</code>, <code>bf-warning</code>, <code>bf-error</code> or <code>bf-fatal</code>. If there are no messages,
               the input field bears the pseudo CSS class <code>bf-no-message</code>  and <code>has-success</code>. The latter colors the label green by default.
               </li>
               <li>If there's a label, it bears the CSS class <code>required</code>, if it's a mandatory field.
               This class adds an asterisk to the label text. You can override the CSS class to remove the asterisk
               or to replace it by something else.</li>
               <li>If there's a label, it bears the CSS classes <code>bf-info</code>, <code>bf-warning</code>,
               <code>bf-error</code> or <code>bf-fatal</code>, depending on which severity the error message the input field has.
               The latter two classes color the label red.<br />
               If there's no message,
               the label bears the pseudo CSS class <code>bf-no-message</code>  and <code>has-success</code>. The latter colors the label green by default.
               </li>
  	  </ul>
  </b:panel>

  	<script type="text/javascript">
                SyntaxHighlighter.all();
            </script>
            <br/><br/><br/><br/>
        </ui:define>
    </ui:composition>
