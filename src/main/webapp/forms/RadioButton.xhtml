<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:f="http://java.sun.com/jsf/core"
  xmlns:b="http://bootsfaces.net/ui" xmlns:jsf="http://xmlns.jcp.org/jsf"
  xmlns:pt="http://xmlns.jcp.org/jsf/passthrough" xmlns:ui="http://java.sun.com/jsf/facelets">
<h:head>
  <title>BootsFaces: next-gen JSF Framework</title>
  <meta name="author" content="Riccardo Massera"></meta>
</h:head>
<h:body style="padding-top: 60px">
  <ui:composition template="/applayout/pageTemplate.xhtml">
    <ui:define name="content">
      <h:form>
        <h1>Radiobuttons <b:badge value="since 1.0" /></h1>
        <p>The BootsFaces radiobutton give you more flexibility to design your page layout than the standard JSF radiobutton.</p>
        <p>For the sake of compatibility, you can follow the traditional JSF approach using <code>&lt;f:selectItem /&gt;</code>
        or <code>&lt;f:selectItems /&gt;</code>. But that only allows for very simple
        layouts (the buttons are vertical, and no element except the label can be between the buttons). In particular,
        you can't embed the radiobuttons in a multi-column Bootstrap grid. So BootsFaces offers a more flexible
        version. The drawback is that you have to add an extra attribute defining which radio buttons belong together.
        We chose the <code>value</code> value attribute for this. So you have to repeat the <code>value</code> attribute 
        with every option of the radio button in order to indicate which buttons belong to a common group:</p>
        <b:panel title="Survey" look="primary">
          <p>Which Java version do you use?</p>
          <b:panelGrid size="xs" columns="4">
	          <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 6" itemValue="6" />
	          <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 7" itemValue="7" />
	          <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 8" itemValue="8" />
	          <b:radiobutton value="#{radiobuttonBean.javaVersion}" itemLabel="Java 9" itemValue="9" />
          </b:panelGrid>
          <b:commandButton value="submit your choice" action="#{radiobuttonBean.submit}" look="primary"
                           update="@form" />
          <b:messages />
        </b:panel>
      </h:form>
      <b:well>
         <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0"><![CDATA[
           <b:panel title="Survey" look="primary">
            <p>Which Java version do you use?</p>
            <b:panelGrid size="xs" columns="3">
              <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 6" itemValue="6" />
              <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 7" itemValue="7" />
              <b:radiobutton value="&num;{radiobuttonBean.javaVersion}" itemLabel="Java 8" itemValue="8" />
             </b:panelGrid>
            <b:commandButton value="submit your choice" action="&num;{radiobuttonBean.submit}" look="primary" />
            <b:messages />
          </b:panel>
        ]]></script>
      </b:well>
      <p>Note that the radiobuttons are implemented as an HTML &lt;div&gt; tag, so by default, the radiobuttons
      are still stacked on each by default. That's why we wrapped them in a &lt;b:panelGrid /&gt; in the example
      above.</p>
      
      <h2>Traditional JSF approach</h2>
      <p>For the sake of convenience and back-ward compatibility, BootsFaces also supports the traditional
      JSF API using <code>&lt;f:selectItem /&gt;</code>. Of course, you loose a lot of flexibility.
      The radiobuttons are stacked on top of each other, and the only way to change this is using
      clever CSS tricks.</p>

      <h:form>
        <b:panel title="Survey" look="primary">
          <p>What's your favorite color?</p>
            <b:radiobutton value="#{radiobuttonBean.favoriteColor}">
                <f:selectItem itemValue="Red"   itemLabel="Red it is!" />
                <f:selectItem itemValue="Green" itemLabel="I love green colors." />
                <f:selectItem itemValue="Blue"  itemLabel="What about blue?" />
            </b:radiobutton>
            <b:commandButton value="submit your choice" action="#{radiobuttonBean.submitColor}"
                             look="primary" update="@form" />
            <b:message for="@form:@property(radiobuttonBean.favoriteColor)" 
                       style="#{radiobuttonBean.favoriteColor=='Green'?'background-image:none;background-color:#0c0;color:white':''}"/>
          </b:panel>
      </h:form>
     <b:well>
         <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0"><![CDATA[
          <p>What's your favorite color?</p>
            <b:radiobutton value="&num;{radiobuttonBean.favoriteColor}">
                <f:selectItem itemValue="Red"   itemLabel="Red it is!" />
                <f:selectItem itemValue="Green" itemLabel="I love green colors." />
                <f:selectItem itemValue="Blue"  itemLabel="What about blue?" />
            </b:radiobutton>
            <b:commandButton value="submit your choice" action="&num;{radiobuttonBean.submitColor}"
                             look="primary" update="@form" />
            <b:message for="@form:@property(radiobuttonBean.favoriteColor)" 
                       style="&num;{radiobuttonBean.favoriteColor=='Green'?'background-image:none;background-color:#0c0;color:white':''}"/>
          </b:panel>
       ]]></script>
      </b:well>

      <h2>Using lists and hashmaps</h2>
      <p><code>&lt;f:selectItems /&gt;</code> allows you to generate the radio buttons from a list or a map:</p>

      <h:form>
        <b:panel title="Survey" look="primary">
          <p>What's your favorite band?</p>
            <b:radiobutton value="#{radiobuttonBean.favoriteBand}">
                <f:selectItems value="#{radiobuttonBean.bands}" />
                <f:selectItem itemValue="#{null}" itemLabel="None of the above" />
            </b:radiobutton>
            <b:commandButton value="submit your choice" action="#{radiobuttonBean.submitBand}"
                             look="primary" update="@form" />
            <b:message for="@form:@property(radiobuttonBean.favoriteBand)" 
                       />
          </b:panel>
      </h:form>
     <b:well>
         <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0"><![CDATA[
       <b:panel title="Survey" look="primary">
          <p>What's your favorite band?</p>
            <b:radiobutton value="&num;{radiobuttonBean.favoriteBand}">
                <f:selectItems value="&num;{radiobuttonBean.bands}" />
                <f:selectItem itemValue="" itemLabel="None of the above" />
            </b:radiobutton>
            <b:commandButton value="submit your choice" action="&num;{radiobuttonBean.submitBand}"
                             look="primary" update="@form" />
            <b:message for="@form:@property(radiobuttonBean.favoriteBand)" 
                       />
          </b:panel>
       ]]></script>
      </b:well>
         <b:well>
         <script type="syntaxhighlighter" class="brush: java; toolbar: false;first-line: 0"><![CDATA[
@RequestScoped
@ManagedBean
public class RadiobuttonBean implements Serializable {
	private static final long serialVersionUID = 1L;
	private Map<String, String> bands = new HashMap<String, String>();

	public RadiobuttonBean() {
		getBands().put("Arch Enemy", "melodic death metal");
		getBands().put("Blind Guardian", "speed metal");
		getBands().put("Fields of the Nephilim", "gothic metal");
		getBands().put("Led Zeppelin", "rock");
	}
	public void submitBand() {
		if (favoriteBand == null || favoriteBand.equals("")) {
			FacesMessages.warning("@property(radiobuttonBean.favoriteBand)", "", "You seem to be a bit indecisive.");
		} else {
			FacesMessages.info("@property(radiobuttonBean.favoriteBand)", "", "So you like " + favoriteBand + ".");
		}
	}
	public Map<String, String> getBands() {
		return bands;
	}

	public void setBands(Map<String, String> bands) {
		this.bands = bands;
	}

	public String getFavoriteBand() {
		return favoriteBand;
	}

	public void setFavoriteBand(String favoriteBand) {
		this.favoriteBand = favoriteBand;
	}
}
       ]]></script>
      </b:well>
      

      <br />
      <br />
      <br />
      <br />
      <ui:include src="RadiobuttonAttributes.xhtml" />
      <b:panel look="info">
        <f:facet name="heading">
          <b>Skinning</b>
        </f:facet>
        <ul>
          <li>Tell the world which CSS classes can be used to change the look of the component.</li>
        </ul>
      </b:panel>

      <script type="text/javascript">
							SyntaxHighlighter.all();
						</script>

    </ui:define>
  </ui:composition>
</h:body>
</html>
