<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:b="http://bootsfaces.net/ui"
      xmlns:ui="http://java.sun.com/jsf/facelets">

      <ui:define name="content">
        <style>td {padding: 8px;}</style>

        <h:form>
          <h1>InputText with tags and / or typeahead (aka autocompletion) <b:badge value="since 0.9.0" /></h1>
          <p>You can design your input texts more fancy by decorating them with little tags. Note that this is a late
          addition to <code>&lt;b:inputText /></code>. Most features of the basic input text component should work
          with the tags extension, but there's no guarantee. However, the alternative was to make it a component of
          its own, which seemed like overkill to us.</p>

          <h2>Known issues</h2>
          <p>Both the tags extension and the typeahead extension create new input fields. This means some features
          don't work. In particular, CSS styles and style classes get lost. For instance, in the examples
          below, the input fields for the tags are smaller than they should be.</p>

          <h2>Tags: Basic usage</h2>
          <p>By setting the attribute <code>tags="true"</code> you can display the input values as tag - similar to
          <code>&lt;b:badge /></code> or to price tags in the supermarket. The tags are separated by commas. Users can
          separate tags either by tying a comma or by hitting the <code>return</code> key.</p>
          <p>The tags extension is based on the jQuery plugin
          <a target="#" href="https://bootstrap-tagsinput.github.io/bootstrap-tagsinput/examples/">Tim Schlechter</a>,
          which has been published unter a MIT license. In other words, you can freely use it.</p>
          <b:tabView>
            <b:tab title="live preview">
             <b:well>
              <b:row>
                <b:inputText tags="true" value="#{tagsBean.tags}" tiny-screen="full-width"
                             placeholder="Hit return to create label"
                             label="What's your favorite music style?"
                             render-label="true"/>
             </b:row>
             </b:well>
            </b:tab>
            <b:tab title="JSF markup">
              <b:well>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
             <![CDATA[
                <b:inputText tags="true" value="&num;{tagsBean.tags}" tiny-screen="full-width"
                             placeholder="Hit return to create label"
                             label="What's your favorite music style?"
                             render-label="true"/>
             ]]></script>
              </b:well>
            </b:tab>
          </b:tabView>

         <h2>Simple typeahead</h2>
          <p>By setting the attribute <code>tags="true"</code> you can display the input values as tag - similar to
          <code>&lt;b:badge /></code> or to price tags in the supermarket. The tags are separated by commas. Users can
          separate tags either by tying a comma or by hitting the <code>return</code> key.</p>
          <p>The typeahead extension is based on the <p><a target="#" href="https://twitter.github.io/typeahead.js/">Twitter typeahead</a></p>
          jQuery plugin, which has been published under the Twitter license. You can use it freely, as long as you
          mention the plugin and add the <a target="#" href="https://github.com/bootstrap-tagsinput/bootstrap-tagsinput/blob/master/LICENSE">license file</a>
          to your project. The CSS styles for Bootstrap 3 are added by the
          <a target="#" href="https://github.com/bassjobsen/typeahead.js-bootstrap-css">CSS files by Bass Jobsen</a>,
          which have been put under a MIT license.</p>
          <p>The remote interface (which is yet to be implemented) requires
          <a target="#" href="https://github.com/twitter/typeahead.js/blob/master/doc/bloodhound.md">Bloodhound</a>,
          which has been published under a MIT licence.</p>


          <b:tabView>
            <b:tab title="live preview">
             <b:well>
              <b:row>
                <b:inputText value=""
                             tiny-screen="full-width"
                             typeahead="true"
                             typeahead-values="#{tagsBean.bandsCSV}"/>
             </b:row>
             </b:well>
            </b:tab>
            <b:tab title="JSF markup">
              <b:well>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
             <![CDATA[
              <b:inputText value=""
                           tiny-screen="full-width"
                           typeahead="true"
                           typeahead-values="&num;{tagsBean.bandsCSV}"/>
             ]]></script>
              </b:well>
            </b:tab>
          </b:tabView>

        <h2>Type ahead with tags</h2>
          <p>You can also combine tags and typeahead.</p>
          <p>Using tags and typeahead at the same time requires
          <a target="#" href="https://github.com/twitter/typeahead.js/blob/master/doc/bloodhound.md">Bloodhound</a>,
          which has been published under a MIT licence.</p>
          <b:tabView>
            <b:tab title="live preview">
             <b:well>
              <b:row>
                <b:inputText value=""
                             tags="true"
                             tiny-screen="full-width"
                             typeahead="true"
                             typeahead-values="#{tagsBean.bandsCSV}"/>
            </b:row>
             </b:well>
            </b:tab>
            <b:tab title="JSF markup">
              <b:well>
              <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
             <![CDATA[
              <b:inputText value=""
                           tags="true"
                           tiny-screen="full-width"
                           typeahead="true"
                           typeahead-values="&num;{tagsBean.bandsCSV}"/>
             ]]></script>
              </b:well>
            </b:tab>
          </b:tabView>

              <h2>Reference section</h2>
                  <ui:include src="InputTextAttributes.xhtml" />

              <b:panel look="info">
  				<f:facet name="heading">
  					<b>Skinning</b>
  				</f:facet>
  				<ul>
  					<li>
  				   		<code>&lt;b:inputfield /&gt;</code> is an <code>input</code> tag bearing the CSS-class <code>form-control</code>.
  				   </li>
  				   <li>
  				   		If the attribute <code>required</code> is true, the pseudo CSS class <code>bf-required</code> is added.
                          Thus you can define your custom style for required fields.
  				   </li>
                     <li>
                     If there's a <code>FacesMessage</code>, the input field is bears one of the pseudo CSS classes
                     <code>bf-info</code>, <code>bf-warning</code>, <code>bf-error</code> or <code>bf-fatal</code>. If there are no messages,
                     the input field bears the pseudo CSS class <code>bf-no-message</code>.
                     </li>
                     <li>If there's a label, it bears the CSS class <code>required</code>, if it's a mandatory field.
                     This class adds an asterisk to the label text. You can override the CSS class to remove the asterisk
                     or to replace it by something else.</li>
                     <li>If there's a label, it bears the CSS classes <code>bf-info</code>, <code>bf-warning</code>,
                     <code>bf-error</code> or <code>bf-fatal</code>, depending on which severity the error message the input field has.
                     The latter two classes color the label red.<br />
                     If there's no message,
                     the label bears the pseudo CSS class <code>bf-no-message</code>.
                     </li>
  				  </ul>
  			</b:panel>
        </h:form>

				<script type="text/javascript">
                    SyntaxHighlighter.all();
                </script>
                <br/><br/><br/><br/>
            </ui:define>
        </ui:composition>
