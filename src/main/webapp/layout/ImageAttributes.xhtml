<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:fragment
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:h="http://java.sun.com/jsf/html"
  xmlns:f="http://java.sun.com/jsf/core"
  xmlns:b="http://bootsfaces.net/ui"
  xmlns:ui="http://java.sun.com/jsf/facelets">

    <b:panel look="info">
      <f:facet name="heading">
        <b>Attributes of &lt;b:image &gt;</b>
      </f:facet>
      <div class="table-responsive">
        <table class="table table-striped table-hover"
          style="background-color: #fff">
          <thead>
            <tr>
              <th>Attribute</th>
              <th>Default value</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
                <td>ajax</td>
                <td>false</td>
                <td>Activates AJAX. The default value is false (no AJAX).</td>
            </tr>
            <tr>
                <td>alt</td>
                <td>(none)</td>
                <td>Alternate textual description of the element rendered by this component.</td>
            </tr>
            <tr>
                <td>binding</td>
                <td>(none)</td>
                <td>An EL expression referring to a server side UIComponent instance in a backing bean.</td>
            </tr>
            <tr>
                <td>disabled</td>
                <td>false</td>
                <td>Boolean value to specify if the button is disabled.</td>
            </tr>
            <tr>
                <td>height</td>
                <td>(none)</td>
                <td>Override for the height of this image.</td>
            </tr>
            <tr>
                <td>id</td>
                <td>(none)</td>
                <td>Unique identifier of the component in a namingContainer.</td>
            </tr>
            <tr>
                <td>immediate</td>
                <td>false</td>
                <td>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase. Default is false.</td>
            </tr>
            <tr>
                <td>lang</td>
                <td>(none)</td>
                <td>Code describing the language used in the generated markup for this component.</td>
            </tr>
            <tr>
                <td>name</td>
                <td>(none)</td>
                <td>Icon name, mandatory.</td>
            </tr>
            <tr>
                <td>onclick</td>
                <td>(none)</td>
                <td>The onclick attribute.</td>
            </tr>
            <tr>
                <td>oncomplete</td>
                <td>(none)</td>
                <td>JavaScript to be executed when ajax completes with success.</td>
            </tr>
            <tr>
                <td>ondblclick</td>
                <td>(none)</td>
                <td>Client side callback to execute when input element is double clicked.</td>
            </tr>
            <tr>
                <td>ondragstart</td>
                <td>(none)</td>
                <td>Client side callback when a drag-and-drop action starts. May also call an AJAX function.</td>
            </tr>
            <tr>
                <td>ondragover</td>
                <td>(none)</td>
                <td>Client side callback when an element is dragged over another element. Call event.preventDefault() to allow the dragged element to drop. May also call an AJAX function.</td>
            </tr>
            <tr>
                <td>ondrop</td>
                <td>(none)</td>
                <td>Client side callback when a drag-and-drop action ends. May also call an AJAX function.</td>
            </tr>
            <tr>
                <td>onmousedown</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is pressed down over input element.</td>
            </tr>
            <tr>
                <td>onmousemove</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is moved within input element.</td>
            </tr>
            <tr>
                <td>onmouseout</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is moved away from input element.</td>
            </tr>
            <tr>
                <td>onmouseover</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is moved onto input element.</td>
            </tr>
            <tr>
                <td>onmouseup</td>
                <td>(none)</td>
                <td>Client side callback to execute when a pointer input element is released over input element.</td>
            </tr>
            <tr>
                <td>readonly</td>
                <td>false</td>
                <td>Flag indicating that this input element will prevent changes by the user.</td>
            </tr>
            <tr>
                <td>rendered</td>
                <td>false</td>
                <td>Boolean value to specify the rendering of the component, when set to false the component will not be rendered.</td>
            </tr>
            <tr>
                <td>style</td>
                <td>(none)</td>
                <td>Inline style</td>
            </tr>
            <tr>
                <td>style-class<br />styleClass (alternative writing)</td>
                <td>(none)</td>
                <td>CSS style class</td>
            </tr>
            <tr>
                <td>title</td>
                <td>(none)</td>
                <td>Advisory title information about markup elements generated for this component.</td>
            </tr>
            <tr>
                <td>tooltip</td>
                <td>(none)</td>
                <td>The text of the tooltip.</td>
            </tr>
            <tr>
                <td>tooltip-container<br />tooltipContainer (alternative writing)</td>
                <td> body </td>
                <td>Where is the tooltip div generated? That's primarily a technical value that can be used to fix rendering errors in special cases. Also see data-container in the documentation of Bootstrap. The default value is body.</td>
            </tr>
            <tr>
                <td>tooltip-delay<br />tooltipDelay (alternative writing)</td>
                <td>0 </td>
                <td>The tooltip is shown and hidden with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
            </tr>
            <tr>
                <td>tooltip-delay-hide<br />tooltipDelayHide (alternative writing)</td>
                <td>0 </td>
                <td>The tooltip is hidden with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
            </tr>
            <tr>
                <td>tooltip-delay-show<br />tooltipDelayShow (alternative writing)</td>
                <td>0 </td>
                <td>The tooltip is shown with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
            </tr>
            <tr>
                <td>tooltip-position<br />tooltipPosition (alternative writing)</td>
                <td>(none)</td>
                <td>Where is the tooltip to be displayed? Possible values: "top", "bottom", "right", "left", "auto", "auto top", "auto bottom", "auto right" and "auto left". Default to "bottom".</td>
            </tr>
            <tr>
                <td>update</td>
                <td>(none)</td>
                <td>Component(s) to be updated with ajax.</td>
            </tr>
            <tr>
                <td>value</td>
                <td>(none)</td>
                <td>The local value of this component</td>
            </tr>
            <tr>
                <td>width</td>
                <td>(none)</td>
                <td>Override for the width of this image.</td>
            </tr>
          </tbody>
        </table>
      </div>
    </b:panel>
</ui:fragment>
