<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:b="http://bootsfaces.net/ui"
	xmlns:ui="http://java.sun.com/jsf/facelets">

	<ui:define name="content">
		<style>
		td {
			padding: 8px;
		}
		.table {
			max-width: none !important;
		}
		</style>
		<h1>Tree <b:badge value="incubating / since 0.8.2" /></h1>
		<p>
			Use <code>b:tree</code> to obtain a Tree component with basic functionalities.
		</p>
		<p>The Tree component needs a backend model to provide the UI
			structure. This means you must provide a value of type
			net.bootsfaces.component.tree.model.Node.</p>
		<p>Currently, the Tree component does not mantain its state so, if you refresh the
			page, the tree resets to its initial state. This happens because the
			component is rendered only client-side.</p>
		<h3>Basic usage</h3>

		<b:tabView activeIndex="1">
			<b:tab title="JSF markup">
				<b:well>
					<script type="syntaxhighlighter"
						class="brush: xml; toolbar: false;gutter: false; first-line: 1">
						<![CDATA[
						<h:form prependId="false">
							<b:tree 
								render-root="false" 
								value="&num;{test.testModel1}"
								showCheckbox="true" 
								enableLinks="true"
								showBorder="true"  />
						</h:form>
						]]></script>
				</b:well>
			</b:tab>
			<b:tab title="displayed as"
				contentStyle="border:1px solid ;padding:10px">
				<h:form prependId="false">
					<b:tree render-root="false" value="#{test.testModel1}"
						showCheckbox="true"
						enableLinks="true" showBorder="true"  />
				</h:form>
			</b:tab>
		</b:tabView>
		<br/>
		<p>
		<b:badge value="Attention"/> We must indeed pay attention to a couple of things: while the tree component was a client side component, 
		and that i need to put it inside a form to be able to perform ajax call, i need to set the prependId="false" 
		option to the form, to prevent the component to lose it's styling, that is based on ids. 
		We will try to solve this limitation in the future version of the component.
		<br/><br/>
		This component is also able to mantain it's state also after a page refresh (expansion level and checked items).
		<br/>
		</p>
		
		<h3>Advanced usage</h3>
		<p>In this case, we have defined a nodeSelectionListener that listen to selection and check events</p>

		<b:tabView activeIndex="1">
			<b:tab title="JSF markup">
				<b:well>
					<script type="syntaxhighlighter"
						class="brush: xml; toolbar: false;gutter: false; first-line: 1">
						<![CDATA[
				<h:form prependId="false">
					<b:container id="treeContent">
			            <b:row>
			            	<b:column>
								<b:tree render-root="false" value="&num;{test.treeModel}"
									node-selection-listener="&num;{test}" showCheckbox="true"
									enableLinks="true" showBorder="false" update="chkItems" />
							</b:column>
						</b:row>
						<b:row>
			            	<b:inputText id="chkItems" styleClass="test" value="&num;{test.checkedColumns}" />
			            </b:row>
		            </b:container>
				</h:form>
						]]></script>
				</b:well>
			</b:tab>
			<b:tab title="displayed as"
				contentStyle="border:1px solid ;padding:10px">
				<h:form prependId="false">
					<b:container id="treeContent" style="width: 100%">
			            <b:row>
			            	<b:column>
								<b:tree render-root="false" value="#{test.treeModel}"
									node-selection-listener="#{test}" showCheckbox="true"
									enableLinks="true" showBorder="false" update="chkItems" />
							</b:column>
						</b:row>
						<b:row>
			            	<b:inputText id="chkItems" styleClass="test" value="#{test.checkedColumns}" />
			            </b:row>
		            </b:container>
				</h:form>
			</b:tab>
		</b:tabView>
		<br/>

		<h2>Reference section</h2>
		<ui:include src="TreeAttributes.xhtml" />
		<b:panel look="info" rendered="false">
			<f:facet name="heading">
				<b>Skinning</b>
			</f:facet>
			<ul>
				<li>Tell the world which CSS classes can be used to change the
					look of the component.</li>
			</ul>
		</b:panel>

		<script type="text/javascript">
			SyntaxHighlighter.all();
		</script>
		<br />
		<br />
		<br />
		<br />
	</ui:define>
</ui:composition>
