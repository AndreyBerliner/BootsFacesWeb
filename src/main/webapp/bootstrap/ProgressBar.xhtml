<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:b="http://bootsfaces.net/ui"
	xmlns:ui="http://java.sun.com/jsf/facelets">

	<ui:define name="content">
		<style>
td {
	padding: 8px;
}
</style>
		<h1>ProgressBar <b:badge value="since 0.8.5" /></h1>

		<p>Sometimes you want to show your users a progress or a completion of some kind. That's where a ProgressBar comes in handy.</p>

		<h1>Basic usage</h1>
		<p>In the simplest case you only need to provide the value the ProgressBar should present. It will then be rendered with the primary look, ranging between 0 and 100, showing the bar completion as a percentage. </p>

		<b:tabView>
			<b:tab title="preview">
				<b:progressBar value="50"/>
			</b:tab>
			<b:tab title="JSF markup">
				<script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
					<![CDATA[
						<b:progressBar value="50"/>
					]]>
				</script>
			</b:tab>
		</b:tabView>

		<h3 id="contextual-alternatives">Contextual alternatives</h3>
		<p>
			Like other components, easily make a ProgressBar more meaningful to a particular context by adding a look attribute with values primary, success, info, warning or danger.
		</p>
		<b:tabView>
			<b:tab title="preview">
				<b:progressBar value="100" look="primary"/>
				<b:progressBar value="90"  look="info"/>
				<b:progressBar value="80"  look="success"/>
				<b:progressBar value="70"  look="warning"/>
				<b:progressBar value="60"  look="danger"/>
			</b:tab>
			<b:tab title="JSF markup">
				<script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
					<![CDATA[
						<b:progressBar value="100" look="primary"/>
						<b:progressBar value="90"  look="info"/>
						<b:progressBar value="80"  look="success"/>
						<b:progressBar value="70"  look="warning"/>
						<b:progressBar value="60"  look="danger"/>
					]]>
				</script>
			</b:tab>
		</b:tabView>

		<h3 id="labels">Labels</h3>
		<p>
			You can always provide your own caption instead of using the standard percentage or simply hide the caption, if you want a pure ProgressBar.
		</p>

		<b:tabView>
			<b:tab title="preview">
				<b:progressBar value="50" caption="This bar is half done."/>
				<b:progressBar value="50" renderCaption="false"/>
			</b:tab>
			<b:tab title="JSF markup">
				<script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
					<![CDATA[
						<b:progressBar value="50" caption="This bar is half done."/>
						<b:progressBar value="50" renderCaption="false"/>
					]]>
				</script>
			</b:tab>
		</b:tabView>

		<p>
			If you use the standard caption, you can also configure the amount of shown fraction digits.
		</p>

		<b:tabView>
			<b:tab title="preview">
				<b:progressBar value="100" min="50" max="200"/>
				<b:progressBar value="100" min="50" max="200" maxDecimalPlaces="6"/>
				<b:progressBar value="100" min="50" max="200" maxDecimalPlaces="0"/>
			</b:tab>
			<b:tab title="JSF markup">
				<script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
					<![CDATA[
						<b:progressBar value="100" min="50" max="200"/>
						<b:progressBar value="100" min="50" max="200" maxDecimalPlaces="6"/>
						<b:progressBar value="100" min="50" max="200" maxDecimalPlaces="0"/>
					]]>
				</script>
			</b:tab>
		</b:tabView>

		<h3 id="custom-ranges">Custom ranges</h3>
		<p>
			Instead 0 and 100 you can use any integer values as boundaries.
		</p>
		<p>
			You don't need to calculate the desired completion percentage yourself, just drop a value that lies between your defined range.
		</p>

		<b:tabView>
			<b:tab title="preview">
				<b:progressBar value="100" min="50" max="200" tooltip="min=50, max=200, value=100"/>
				<b:progressBar value="0" min="-100" max="0"   tooltip="min=-100, max=0, value=0"/>
			</b:tab>
			<b:tab title="JSF markup">
				<script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
					<![CDATA[
						<b:progressBar value="100" min="50" max="200" tooltip="min=50, max=200, value=100"/>
						<b:progressBar value="0" min="-100" max="0" tooltip="min=-100, max=0, value=0"/>
					]]>
				</script>
			</b:tab>
		</b:tabView>

		<h3 id="striped">Striped</h3>
		<p>
			Striped ProgressBars can be used to indicate a long running action, that was already finished or aborted.
		</p>
		<p>
			Uses a gradient to create a striped effect. Not available in IE9 and below.
		</p>

		<b:tabView>
			<b:tab title="preview">
				<b:progressBar value="100" striped="true" />
			</b:tab>
			<b:tab title="JSF markup">
				<script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
					<![CDATA[
						<b:progressBar value="100" striped="true" />
					]]>
				</script>
			</b:tab>
		</b:tabView>

		<h3 id="animated">Animated</h3>
		<p>
			If you want to indicate a currently running action, it's much more untuitive to make your ProgressBar move a bit.
		</p>
		<p>
			Making a ProgressBar animated automatically applies stripes to it (otherwise there would be nothing to see). Thus this is also not available in IE9 and below.
		</p>

		<b:tabView>
			<b:tab title="preview">
				<b:progressBar value="100" animated="true" renderCaption="false"/>
				<b:progressBar value="75" animated="true"/>
			</b:tab>
			<b:tab title="JSF markup">
				<script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
					<![CDATA[
						<b:progressBar value="100" animated="true" renderCaption="false"/>
						<b:progressBar value="75" animated="true"/>
					]]>
				</script>
			</b:tab>
		</b:tabView>

		<b:panel look="info">
			<f:facet name="heading">
				<b>Attributes of &lt;b:progressBar &gt;</b>
			</f:facet>
			<div class="table-responsive">
				<table class="table table-striped table-hover"
					style="background-color: #fff">
					<thead>
						<tr>
							<th>Attribute</th>
							<th>Default value</th>
							<th>Description</th>
						</tr>
					</thead>
					<tbody>
						<tr>
						    <td>id</td>
						    <td>(none)</td>
						    <td>Unique identifier of the component in a namingContainer.</td>
						</tr>
						<tr>
						    <td>rendered</td>
						    <td>false</td>
						    <td>Boolean value to specify the rendering of the component, when set to false the component will not be rendered.</td>
						</tr>
						<tr>
						    <td>label</td>
						    <td>(none)</td>
						    <td>Optional label, which is shown above the progress bar. Can be used for indicating the current value.</td>
						</tr>
						<tr>
						    <td>look</td>
						    <td>(none)</td>
						    <td>Look of the ProgressBar, can be info, success, warning, or danger. If not specified, a blue bar will be rendered.</td>
						</tr>
						<tr>
						    <td>value</td>
						    <td>(none)</td>
						    <td>The value the ProgressBar should indicate. See the label attribute, if the exact value should be shown in text form.</td>
						</tr>
						<tr>
						    <td>max</td>
						    <td> 100 </td>
						    <td>The maximum value of the ProgressBar. (default 100)</td>
						</tr>
						<tr>
						    <td>min</td>
						    <td> 0 </td>
						    <td>The minimum value of the ProgressBar. (default 0)</td>
						</tr>
						<tr>
						    <td>striped</td>
						    <td> false </td>
						    <td>If true, stripes will be added to the ProgressBar's look. Default value: false.</td>
						</tr>
						<tr>
						    <td>animated</td>
						    <td> false </td>
						    <td>If true, stripes will be added and animated to move from right to left to indicate running actions. Default value: false.</td>
						</tr>
						<tr>
						    <td>tooltip</td>
						    <td>(none)</td>
						    <td>The text of the tooltip.</td>
						</tr>
						<tr>
						    <td>tooltip-container</td>
						    <td> body </td>
						    <td>Where is the tooltip div generated? That's primarily a technical value that can be used to fix rendering errors in special cases. Also see data-container in the documentation of Bootstrap. The default value is body.</td>
						</tr>
						<tr>
						    <td>tooltip-delay</td>
						    <td>0 </td>
						    <td>The tooltip is shown and hidden with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
						</tr>
						<tr>
						    <td>tooltip-delay-hide</td>
						    <td>0 </td>
						    <td>The tooltip is hidden with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
						</tr>
						<tr>
						    <td>tooltip-delay-show</td>
						    <td>0 </td>
						    <td>The tooltip is shown with a delay. This value is the delay in milliseconds. Defaults to 0 (no delay).</td>
						</tr>
						<tr>
						    <td>tooltip-position</td>
						    <td>(none)</td>
						    <td>Where is the tooltip to be displayed? Possible values: "top", "bottom", "right", "left", "auto", "auto top", "auto bottom", "auto right" and "auto left". Default to "bottom".</td>
						</tr>
					</tbody>
				</table>
			</div>
		</b:panel>
		<b:panel look="info">
			<f:facet name="heading">
				<b>Skinning</b>
			</f:facet>
			<ul>
				<li>The entire <code>progressBar</code> is enclosed in a <code>div</code> bearing the CSS-class <code>progress</code>.</li>
				<li>The actual bar, that shows the current progress is a <code>div</code> itself bearing the CSS-class <code>progress-bar</code>.
				<ul>
					<li>If the bar has a custom look, this div additionally contains the class <code>progress-bar-{look}</code> where {look} may be primary, info, success, warning or danger.</li>
					<li>If the bar is striped, this div additionally contains the class <code>progress-bar-striped</code>.</li>
					<li>If the bar is animated, this div additionally contains the class <code>active</code> and  <code>progress-bar-striped</code>.</li>
				</ul>
				</li>

				<li>The bar's caption is held inside a span with no class, if it is hidden, if bears the CSS-class <code>sr-only</code></li>
			</ul>
		</b:panel>

		<script type="text/javascript">
      		SyntaxHighlighter.all();
    	</script>
		<br />
		<br />
		<br />
		<br />
	</ui:define>
</ui:composition>